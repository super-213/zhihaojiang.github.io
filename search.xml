<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/zhihaojiang.github.io/2025/01/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>广州旅游</title>
    <url>/zhihaojiang.github.io/2024/07/31/20240731%E5%B9%BF%E5%B7%9E%E6%97%85%E6%B8%B8/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/super-213/hexo-images/blob/main/articles/2024/07/31/2024-05811.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/07/31/2024-05829.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/07/31/2024-05837.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/07/31/2024-05840.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/07/31/2024-05883.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/07/31/2024-05884.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/07/31/2024-05904.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/07/31/001.jpg"
                      alt="photo"
                ></p>
]]></content>
      <categories>
        <category>旅游</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>嘉兴大学演出</title>
    <url>/zhihaojiang.github.io/2024/10/17/20241017%E5%98%89%E5%85%B4%E5%A4%A7%E5%AD%A6%E6%BC%94%E5%87%BA/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07355.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07363.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07436.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07465.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07470.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07494.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07495.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2024/10/17/2024-07496.jpg"
                      alt="photo"
                ></p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语句</title>
    <url>/zhihaojiang.github.io/2025/01/06/20250106MySQL%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>本位与2025-01-06在CSDN上发布 现将其转移至自己的博客</p>
<h2 id="引擎相关"><a href="#引擎相关" class="headerlink" title="引擎相关"></a>引擎相关</h2><h3 id="查看存储引擎："><a href="#查看存储引擎：" class="headerlink" title="查看存储引擎："></a>查看存储引擎：</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure></div>
<h3 id="查看显示支持的存储引擎信息："><a href="#查看显示支持的存储引擎信息：" class="headerlink" title="查看显示支持的存储引擎信息："></a>查看显示支持的存储引擎信息：</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;have%&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="查看默认的存储引擎："><a href="#查看默认的存储引擎：" class="headerlink" title="查看默认的存储引擎："></a>查看默认的存储引擎：</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;storage_engine&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="数据库相关操作-增-删-改"><a href="#数据库相关操作-增-删-改" class="headerlink" title="数据库相关操作(增 删 改)"></a>数据库相关操作(增 删 改)</h2><h3 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a>创建数据库：</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">create datbase [<span class="keyword">if</span> not exists] db_name</span><br><span class="line">[[DEFAULT] CHARACTER SET charset_name]</span><br><span class="line">[[DEFALUT] COLLATE collation_name]</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>PS</p>

    </div>
    <div class="notel-content">
      <p>“[ ]”中的是可选项 可写可不写<br>将db_name替换成你想给数据库取的名字</p>

    </div>
  </div>

<h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></div>

<h3 id="查看数据库的详细信息"><a href="#查看数据库的详细信息" class="headerlink" title="查看数据库的详细信息"></a>查看数据库的详细信息</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show create database db_name;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用某个数据库"><a href="#使用某个数据库" class="headerlink" title="使用某个数据库"></a>使用某个数据库</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">use db_name;</span><br></pre></td></tr></table></figure></div>

<h3 id="修改数据库编码"><a href="#修改数据库编码" class="headerlink" title="修改数据库编码"></a>修改数据库编码</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alter database [db_name]</span><br><span class="line">[DEFAULT CHARACTER SET charset_name]| [[DEFAULT]COLLATE collation_name]</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>PS</p>

    </div>
    <div class="notel-content">
      <p>例1：将schoolDB的编码方式有GBK修改为UTF8。</p>
<p>法1:ALTER DATABASE schoolDB CHARACTER SET UTF8;</p>
<p>法2:ALTER DATABASE schoolDB collate utf8_general_ci;</p>

    </div>
  </div>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">drop database [<span class="keyword">if</span> exists] db_name;</span><br></pre></td></tr></table></figure></div>
<h2 id="表的相关操作（增删改查）"><a href="#表的相关操作（增删改查）" class="headerlink" title="表的相关操作（增删改查）"></a>表的相关操作（增删改查）</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">create table [<span class="keyword">if</span> exists] t_name(</span><br><span class="line">    name_1 int [primary key],</span><br><span class="line">    name_2 varchar(10)[...],</span><br><span class="line">    name_3 <span class="built_in">float</span>(5, 3)[...]</span><br><span class="line">)[engine = INNODB charset = UTF-8];</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>PS</p>

    </div>
    <div class="notel-content">
      <p>这里t_name是表名</p>
<p>name_1 name_2 name_3 是字段名</p>
<p>字段名后面[ ]中的是完整性约束(可选填)</p>
<p> 完整性约束条件：<br> PRIMARY KEY主键（唯一来标识的，每一个表都一个，自动非空）<br> AUTO_INCREMENT自增长<br> FOREIGN KEY外键<br> NOT NULL非空<br> UNIQUE KEY唯一<br> DEFAULT默认值<br>最下面的[ ] 中的是引擎和编码方式的选择</p>

    </div>
  </div>

<h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><h4 id="在name-3的（前面-后面）-增加新列name-4"><a href="#在name-3的（前面-后面）-增加新列name-4" class="headerlink" title="[在name_3的（前面|后面）] 增加新列name_4"></a>[在name_3的（前面|后面）] 增加新列name_4</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alter table t_name</span><br><span class="line">    add name_4 [first|after name_3];</span><br></pre></td></tr></table></figure></div>

<h4 id="修改列的数据类型"><a href="#修改列的数据类型" class="headerlink" title="修改列的数据类型"></a>修改列的数据类型</h4><p>将name_2的数据类型修改成float(4,3)</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alter table t_name</span><br><span class="line">    modify name_2 <span class="built_in">float</span>(4,3)</span><br></pre></td></tr></table></figure></div>

<h4 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h4><p>将表t_name中的name_1列的名字修改成new_name_1</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alter table t_name</span><br><span class="line">    change name_1 new_name_1;</span><br></pre></td></tr></table></figure></div>

<h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><p>将表t_name的名字修改成new_t_name</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alter table t_name</span><br><span class="line">    rename [to] new_t_name;</span><br></pre></td></tr></table></figure></div>

<h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><p>将表t_name中的name_1列删除</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alter table t_name</span><br><span class="line">drop column name_1；</span><br></pre></td></tr></table></figure></div>

<h4 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">delete from t_name</span><br><span class="line"><span class="built_in">where</span> 条件表达式；</span><br></pre></td></tr></table></figure></div>

<h4 id="修改存储引擎"><a href="#修改存储引擎" class="headerlink" title="修改存储引擎"></a>修改存储引擎</h4><p>将表t_name的存储引擎修改成INNODB</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alter table t_name</span><br><span class="line">    engine = INNODB;</span><br></pre></td></tr></table></figure></div>

<h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><p>查看表名</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></div>

<p>查看表的结构</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#法1</span></span><br><span class="line">show create table t_name；</span><br><span class="line"> </span><br><span class="line"><span class="comment">#法2</span></span><br><span class="line">describe t_name;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#法3</span></span><br><span class="line">desc t_name;</span><br></pre></td></tr></table></figure></div>

<h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">create table [<span class="keyword">if</span> not existe] t_name</span><br><span class="line">[like t_name_2]</span><br><span class="line">[as 表信息]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#like可以复制表的结构 表中的信息不会被复制 复制出来的是个空表</span></span><br><span class="line"><span class="comment">#as 可以复制表中的信息 相当于CV大法</span></span><br></pre></td></tr></table></figure></div>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>将表t_name删除</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">drop table t_name；</span><br></pre></td></tr></table></figure></div>

<h2 id="数据相关操作"><a href="#数据相关操作" class="headerlink" title="数据相关操作"></a>数据相关操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">insert [into]</span><br><span class="line">    t_name(name_1, name_2, name_3)</span><br><span class="line">    values(12,<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;2025-01-04&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="查看插入信息"><a href="#查看插入信息" class="headerlink" title="查看插入信息"></a>查看插入信息</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * from t_name;</span><br></pre></td></tr></table></figure></div>

<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">update t_name</span><br><span class="line"><span class="built_in">set</span> name_1 = x,</span><br><span class="line">    name_2 = y,</span><br><span class="line">    name_3 = z</span><br><span class="line">[<span class="built_in">where</span> 条件表达式];</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>PS</p>

    </div>
    <div class="notel-content">
      <p>若where不写<br>则更新全部记录</p>

    </div>
  </div>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">delate from t_name</span><br><span class="line">[<span class="built_in">where</span> 条件表达式];</span><br></pre></td></tr></table></figure></div>

<p>完全清除某个表<br>完全清除表t_name：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">truncate</span> [table] t_name;</span><br></pre></td></tr></table></figure></div>

<h2 id="单表查询（重点）"><a href="#单表查询（重点）" class="headerlink" title="单表查询（重点）"></a>单表查询（重点）</h2><p>先给出语法：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [distinct] name_1 [as new_name],</span><br><span class="line">       [distinct] name_2 [as new_name],</span><br><span class="line">from t_name</span><br><span class="line">[<span class="built_in">where</span> 条件表达式,]</span><br><span class="line">[group by name [ASC|DESC],]</span><br><span class="line">[order by name [ASC|DESC],]</span><br><span class="line">[<span class="built_in">limit</span> 条数]；</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>PS</p>

    </div>
    <div class="notel-content">
      <p>SELECT子句：<br>指定要查询的列名称，列与列之间用逗号隔开。<br>还可以为列指定新的别名，显示在输出的结果中。<br>ALL关键字表示显示所有的行，包括重复行，是系统默认的<br>DISTINCT表示显示的结果要消除重复的行。<br>FROM子句：指定要查询的表，可以指定两个以上的表，表与表之间用逗号隔开。<br>WHERE子句：指定要查询的条件。<br>如果有WHERE子句，就按照“条件表达式”指定的条件进行查询；<br>如果没有WHERE子句，就查询所有记录。</p>
<p>GROUP BY ：<br>子句用于对查询结构进行分组。<br>按照“列名1”指定的字段进行分组；<br>如果GROUP BY子句后带着HAVING关键字，那么只有满足“条件表达式2”中指定的条件的才能够输出。<br>GROUP BY子句通常和COUNT()、SUM()等聚合函数一起使用。</p>
<p>HAVING子句：<br>指定分组的条件，通常放Group by字句之后</p>
<p>ORDER BY子句：用于对查询结果的进行排序。<br>排序方式由ASC和DESC两个参数指出；<br>ASC参数表示按升序进行排序。默认情况下是ASC。<br>DESC参数表示按降序的顺序进行排序。升序表示值按从小到大的顺序排列。</p>
<p>LIMIT 子句：限制查询的输出结果的行数。</p>

    </div>
  </div>

<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>等值连接</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> x_name_1,</span><br><span class="line">       y_name_2</span><br><span class="line">from t_x </span><br><span class="line">inner <span class="built_in">join</span> t_y on t_x.id = t_y.id</span><br><span class="line"><span class="built_in">where</span>...;</span><br></pre></td></tr></table></figure></div>
<p>左连接、右连接和联合查询不过多赘述</p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>带in关键词的子查询</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line">from t_name_1</span><br><span class="line"><span class="built_in">where</span> name_1 <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> name_2 from t_name_2</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p>带比较运算符的子查询</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line">from t_name_1</span><br><span class="line"><span class="built_in">where</span> name = (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">id</span></span><br><span class="line">    from t_name_2</span><br><span class="line">    <span class="built_in">where</span> <span class="built_in">id</span> = 2</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>引:<br>    面试题：select id,name,age from sd where name&#x3D;’张飞’<br>    怎么优化？最佳方案是什么？<br>    答：在name上创建索引：<br>    create index in name on sd(name);</p>
<h3 id="语法（已存在的表）："><a href="#语法（已存在的表）：" class="headerlink" title="语法（已存在的表）："></a>语法（已存在的表）：</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">create index in_id</span><br><span class="line">on t_name(<span class="built_in">id</span>);</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>PS</p>

    </div>
    <div class="notel-content">
      <p>in_id:索引名 （自己取）<br>t_name:表名<br>id:列名</p>

    </div>
  </div>

<h3 id="在创建表的时候创建索引"><a href="#在创建表的时候创建索引" class="headerlink" title="在创建表的时候创建索引"></a>在创建表的时候创建索引</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">create table t_name(</span><br><span class="line">...</span><br><span class="line">[unique|fulltext|spatial] index|key [in_id](name[长度])[ASC|DESC]</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">create view view_name as</span><br><span class="line"><span class="comment">#查询语句:</span></span><br><span class="line"><span class="keyword">select</span>...</span><br><span class="line">[with [cascaded|<span class="built_in">local</span>] check option];</span><br></pre></td></tr></table></figure></div>

<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">drop view view_name;</span><br></pre></td></tr></table></figure></div>
<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">create user <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identifiednby <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * from mysql.user;</span><br></pre></td></tr></table></figure></div>

<h3 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">grant 权限 on 库.表 to <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h3 id="触发器设置"><a href="#触发器设置" class="headerlink" title="触发器设置"></a>触发器设置</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#触发器设置</span></span><br><span class="line">CREATE TRIGGER before_position_update</span><br><span class="line">BEFORE UPDATE ON staff</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    IF OLD.position != NEW.position THEN</span><br><span class="line">        CASE NEW.position</span><br><span class="line">            WHEN <span class="string">&#x27;董事长&#x27;</span> THEN</span><br><span class="line">                SET NEW.role = 9;</span><br><span class="line">            WHEN <span class="string">&#x27;经理&#x27;</span> THEN</span><br><span class="line">                SET NEW.role = 6;</span><br><span class="line">            ELSE</span><br><span class="line">                SET NEW.role = 2;</span><br><span class="line">        END CASE;</span><br><span class="line">    END IF;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>PS</p>

    </div>
    <div class="notel-content">
      <p>这里是当position设置为经理或董事长时 自动更改权限等级</p>

    </div>
  </div>

<h3 id="显示设置的触发器"><a href="#显示设置的触发器" class="headerlink" title="显示设置的触发器"></a>显示设置的触发器</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示设置的触发器</span></span><br><span class="line">SHOW TRIGGERS;</span><br></pre></td></tr></table></figure></div>

<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>备份数据库到文件。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p db_name &gt; backup.sql</span><br></pre></td></tr></table></figure></div>

<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>从文件恢复数据库。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u username -p db_name &lt; backup.sql</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>澳洲旅游</title>
    <url>/zhihaojiang.github.io/2025/01/25/20250125%E6%BE%B3%E6%B4%B2%E6%97%85%E6%B8%B8/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09682.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09718.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09763.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09941.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09945.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09946.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09958.jpg"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/01/25/2025-09967.jpg"
                      alt="photo"
                ></p>
]]></content>
      <categories>
        <category>旅游</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习作业笔记</title>
    <url>/zhihaojiang.github.io/2025/03/28/20250328%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>我们需要利用回归分析预测世界大学综合得分</p>
<p>#Jupyter notebook代码<br>基本库导入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.ensemble import RandomForestRegressor</span><br><span class="line">from sklearn.metrics import mean_squared_error,r2_score</span><br><span class="line">from scipy import stats</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line">from sklearn.metrics import root_mean_squared_error</span><br><span class="line">from sklearn import linear_model</span><br><span class="line">from sklearn import metrics</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">university = pd.read_csv(<span class="string">&#x27;cwurData.csv&#x27;</span>)</span><br><span class="line">university.head()</span><br></pre></td></tr></table></figure></div>
<p>此时可能会出现报错</p>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>报错信息</p>

    </div>
    <div class="notel-content">
      <p>File parsers.pyx:574, in pandas._libs.parsers.TextReader.<strong>cinit</strong>()</p>
<p>File parsers.pyx:663, in pandas._libs.parsers.TextReader._get_header()</p>
<p>File parsers.pyx:874, in pandas._libs.parsers.TextReader._tokenize_rows()</p>
<p>File parsers.pyx:891, in pandas._libs.parsers.TextReader._check_tokenize_status()</p>
<p>File parsers.pyx:2053, in pandas._libs.parsers.raise_parser_error()</p>
<p>File <frozen codecs>:322, in decode(self, input, final)</p>
<p>UnicodeDecodeError: ‘utf-8’ codec can’t decode bytes in position 3864-3865: invalid continuation byte</p>

    </div>
  </div>
<p>不用担心，这是因为pd.read_csv()在不指明encoding时默认使用utf-8编码<br>这段报错是因为该文件不是使用utf-8进行编码。<br>我们可以写一段代码判断文件的编码格式</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import chardet</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&#x27;cwurData.csv&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) as f:</span><br><span class="line">    university = f.read()</span><br><span class="line">    encoding = chardet.detect(university)</span><br><span class="line">    <span class="built_in">print</span>(encoding)</span><br></pre></td></tr></table></figure></div>
<p>之后将其输出的encoding写入pd.read_csv()即可</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">university = pd.read_csv(<span class="string">&#x27;cwurData.csv&#x27;</span>, encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line">university.head()</span><br></pre></td></tr></table></figure></div>
<p>输出结果为<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/001.png"
                      alt="photo"
                ><br>通过该数据可知其数字应该是越小越好<br>因此相关性应该是负数 且越小越好</p>
<p>之后我们查看文件的维度</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">university.shape</span><br></pre></td></tr></table></figure></div>
<p>输出结果为:(2200, 14)<br>说明该文件总共有2200行数据，14个特征</p>
<p>接下来我们分析下文件是否有异常</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">university.describe()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/002.png"
                      alt="photo"
                ><br>从第一行(count)看到 broad_impact数据与其他数据不同<br>上述从head()函数我猜测broad_impact列全是NA<br>仔细查看文件后可知:2012年和2013年的broad_impact存在缺失<br>其他数据看起来没什么问题 数据质量基本完整</p>
<p>先用相关性矩阵看看各个数据之间的关系</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y = university[<span class="string">&#x27;score&#x27;</span>]</span><br><span class="line">X = university.drop([<span class="string">&quot;score&quot;</span>,<span class="string">&quot;institution&quot;</span>,<span class="string">&quot;country&quot;</span>, <span class="string">&quot;year&quot;</span>,<span class="string">&quot;broad_impact&quot;</span>],axis=1)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line">correlation_matrix = pd.concat([X_train, y_train], axis=1).corr()</span><br><span class="line"></span><br><span class="line">sns.heatmap(correlation_matrix, annot=True, cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/003.png"
                      alt="photo"
                ><br>通过上图可以看到world_rank与publications、influence、citations有强相关性<br>我们用matplotlib.pyplot库做出这些图</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = university[<span class="string">&quot;publications&quot;</span>]</span><br><span class="line">y = university[<span class="string">&quot;world_rank&quot;</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;world_rank&amp;publications&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/004.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = university[<span class="string">&quot;influence&quot;</span>]</span><br><span class="line">y = university[<span class="string">&quot;world_rank&quot;</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;world_rank&amp;influence&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/005.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = university[<span class="string">&quot;citations&quot;</span>]</span><br><span class="line">y = university[<span class="string">&quot;world_rank&quot;</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;world_rank&amp;citations&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/006.png"
                      alt="photo"
                ></p>
<p>从上述三幅图可以看到world_rank与publications、influence有强相关性<br>world_rank与citations也有一定的相关性 但不是很明显<br>再继续做几张图看看其他数据之间的关系怎么样</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = university[<span class="string">&quot;publications&quot;</span>]</span><br><span class="line">y = university[<span class="string">&quot;influence&quot;</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;influence&amp;publications&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/007.png"
                      alt="photo"
                ><br>从图中可以看出点近似集中在一条直线上<br>说明出版物与影响力成正比</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = university[<span class="string">&quot;broad_impact&quot;</span>]</span><br><span class="line">y = university[<span class="string">&quot;score&quot;</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;score&amp;broad_impact&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/03/28/008.png"
                      alt="photo"
                ><br>从图中可以看出broad_impact与score成非线性关系 broad_impact的大小与score无关<br><br>用相关性进行检测</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = university[<span class="string">&quot;broad_impact&quot;</span>]</span><br><span class="line">y = university[<span class="string">&quot;score&quot;</span>]</span><br><span class="line">correlation = x.corr(y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r:&quot;</span>, correlation)</span><br></pre></td></tr></table></figure></div>
<p>输出结果为:r: -0.5315904271503679</p>
<p>呈现负相关 因此确定 broad_impact的大小与score无关<br>并且broad_impact中存在缺失值<br>缺失值的处理一般会使用用众数填充、前或后一个数填充、删除缺失列来处理<br>这里broad_impact的大小与score无关<br>因此可以将此列删去<br>同时也可以降低维度</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y = university[<span class="string">&#x27;score&#x27;</span>]</span><br><span class="line">X = university.drop([<span class="string">&quot;score&quot;</span>,<span class="string">&quot;institution&quot;</span>,<span class="string">&quot;country&quot;</span>, <span class="string">&quot;year&quot;</span>,<span class="string">&quot;broad_impact&quot;</span>],axis=1)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">lr.intercept_</span><br><span class="line"></span><br><span class="line">coefs_lr = pd.Series(lr.coef_).round()</span><br><span class="line">coefs_lr.index = X_train.columns</span><br><span class="line">coefs_lr</span><br></pre></td></tr></table></figure></div>

<p>其结果为:<br>63.60601390140695</p>
<p>world_rank              0.0<br>national_rank          -0.0<br>quality_of_education   -0.0<br>alumni_employment      -0.0<br>quality_of_faculty     -0.0<br>publications           -0.0<br>influence              -0.0<br>citations              -0.0<br>patents                -0.0<br>dtype: float64</p>
<p>说明模型拟合得不好<br>查看其均方根误差和决定系数</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">lr_train_pred = lr.predict(X_train)</span><br><span class="line">lr_test_pred = lr.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;训练集上的均方根误差和决定系数分别为:&quot;</span>, root_mean_squared_error(lr_train_pred,y_train), r2_score(lr_train_pred,y_train))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;测试集上的均方根误差和决定系数分别为:&quot;</span>, root_mean_squared_error(lr_test_pred,y_test), r2_score(lr_test_pred,y_test))</span><br></pre></td></tr></table></figure></div>
<p>输出结果为:<br>训练集上的均方根误差和决定系数分别为: 5.441831802594455 0.079429595738992<br>测试集上的均方根误差和决定系数分别为: 5.369301125131177 0.06344204755145388</p>
<p>上述系数过小可能是数值之间差别过大导致拟合得不好<br>将其进行标准化</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train_scaled, y_train)</span><br><span class="line">coefs_lr = pd.Series(lr.coef_).round()</span><br><span class="line">coefs_lr.index = X_train.columns</span><br><span class="line">coefs_lr</span><br><span class="line"></span><br><span class="line">lr.intercept_</span><br></pre></td></tr></table></figure></div>
<p>输出结果为:<br>world_rank              0.0<br>national_rank          -0.0<br>quality_of_education   -0.0<br>alumni_employment      -1.0<br>quality_of_faculty     -4.0<br>publications           -0.0<br>influence              -0.0<br>citations              -0.0<br>patents                -0.0<br>dtype: float64</p>
<p>47.83457386363636</p>
<p>模型得到的结果很低 说明拟合得不好<br>更换其他线性回归模型试试</p>
<div class="tabs" id="tab-线性回归模型"><ul class="nav-tabs"><li class="tab active"><a class="#线性回归模型-1">岭回归</a></li><li class="tab"><a class="#线性回归模型-2">lasso回归</a></li><li class="tab"><a class="#线性回归模型-3">弹性网回归</a></li></ul><div class="tab-content"><div class="tab-pane active" id="线性回归模型-1"><p><strong>岭回归</strong></p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ridge= linear_model.Ridge(alpha=0.05)</span><br><span class="line">ridge.fit(X_train,y_train)</span><br><span class="line">Y_hat = ridge.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;截距为：&quot;</span>, ridge.intercept_)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;回归系数为：&quot;</span>, ridge.coef_)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;RMSE:&quot;</span>, np.sqrt(metrics.mean_squared_error(y_test, Y_hat)))</span><br></pre></td></tr></table></figure></div>
<p> 输出结果为:<br> 截距为： 63.60601382257282<br>回归系数为： [ 0.00116895 -0.00608447 -0.00380894 -0.00592045 -0.06344228 -0.00045937<br> -0.0009899  -0.00046924 -0.00164281]<br> RMSE: 5.369301120766853</p></div><div class="tab-pane" id="线性回归模型-2"><p><strong>lasso回归</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">lasso= linear_model.Lasso(alpha=0.05)</span><br><span class="line">lasso.fit(X_train,y_train)</span><br><span class="line">Y_hat=lasso.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;截距为：&quot;</span>,lasso.intercept_)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;回归系数为：&quot;</span>, lasso.coef_)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;RMSE:&quot;</span>, np.sqrt(metrics.mean_squared_error(y_test, Y_hat)))</span><br></pre></td></tr></table></figure></div>
<p>输出结果为:<br>截距为： 63.602800047243974<br>回归系数为： [ 0.00115484 -0.00606551 -0.00381082 -0.00591616 -0.06342471 -0.00045677<br> -0.00098495 -0.00046729 -0.00164163]<br> RMSE: 5.369181579518303</p></div><div class="tab-pane" id="线性回归模型-3"><p><strong>弹性网回归</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">elastic= linear_model.ElasticNet(alpha=0.1,l1_ratio=0.4)</span><br><span class="line">elastic.fit(X_train,y_train)</span><br><span class="line">y_hat = elastic.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;截距为：&quot;</span>,elastic.intercept_)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;回归系数为：&quot;</span>, elastic.coef_)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;RMSE:&quot;</span>, np.sqrt(metrics.mean_squared_error(y_test, Y_hat)))</span><br></pre></td></tr></table></figure></div>
<p>输出结果为:<br>截距为： 63.60327653271375<br>回归系数为： [ 0.00115777 -0.0060693  -0.00381124 -0.00591707 -0.06342543 -0.00045734<br> -0.00098603 -0.00046779 -0.00164194]<br> RMSE: 5.369181579518303</p></div></div></div>

<p>可以看到这些回归得到的结果都不好<br>说明这个不是呈线性关系</p>
<p>我们使用随机森林进行尝试</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">rf = RandomForestRegressor()</span><br><span class="line">rf.fit(X_train, y_train)</span><br><span class="line">rf_train_pred = rf.predict(X_train)</span><br><span class="line">rf_test_pred = rf.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;训练集上的均方根误差和决定系数分别为:&quot;</span>, root_mean_squared_error(rf_train_pred,y_train), r2_score(rf_train_pred,y_train))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;测试集上的均方根误差和决定系数分别为:&quot;</span>, root_mean_squared_error(rf_test_pred,y_test), r2_score(rf_test_pred,y_test))</span><br></pre></td></tr></table></figure></div>
<p>输出结果为:<br>训练集上的均方根误差和决定系数分别为: 0.396126717281446 0.9974538720434839<br>测试集上的均方根误差和决定系数分别为: 1.0185613846393418 0.9808937922886296</p>
<p>可以看到 决定系数为0.99 0.98以上 说明模型拟合得很好</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>连续特征离散化的处理方法及其python实现</title>
    <url>/zhihaojiang.github.io/2025/03/29/20250329%E8%BF%9E%E7%BB%AD%E7%89%B9%E5%BE%81%E7%A6%BB%E6%95%A3%E5%8C%96%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6python%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="等距离散法"><a href="#等距离散法" class="headerlink" title="等距离散法"></a>等距离散法</h2><p>将连续数据的范围划分为几个宽度相等的区间。每个区间内的数值都有相同的范围。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成连续数据</span></span><br><span class="line">data = np.random.randn(1000)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据分为 5 个等宽区间</span></span><br><span class="line">bins = pd.cut(data, bins=5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分箱结果</span></span><br><span class="line"><span class="built_in">print</span>(bins.value_counts())</span><br></pre></td></tr></table></figure></div>

<h2 id="等频离散法"><a href="#等频离散法" class="headerlink" title="等频离散法"></a>等频离散法</h2><p>将数据分成几个区间，使得每个区间内的数据量相同。这样可以避免某些区间的数据过于集中。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成连续数据</span></span><br><span class="line">data = np.random.randn(1000)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据分为 5 个等频区间</span></span><br><span class="line">bins = pd.qcut(data, q=5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分箱结果</span></span><br><span class="line"><span class="built_in">print</span>(bins.value_counts())</span><br></pre></td></tr></table></figure></div>

<h2 id="K-means-模型离散法"><a href="#K-means-模型离散法" class="headerlink" title="K-means 模型离散法"></a>K-means 模型离散法</h2><p>先从样本集中随机选取 k个样本作为簇中心，并计算所有样本与这 k个“簇中心”的距离，对于每一个样本，将其划分到与其距离最近的“簇中心”所在的簇中。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成连续数据</span></span><br><span class="line">data = np.random.randn(1000).reshape(-1, 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 K-means 聚类</span></span><br><span class="line">kmeans = KMeans(n_clusters=5)</span><br><span class="line">labels = kmeans.fit_predict(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看聚类标签</span></span><br><span class="line"><span class="built_in">print</span>(pd.Series(labels).value_counts())</span><br></pre></td></tr></table></figure></div>

<h2 id="基于决策树的离散化"><a href="#基于决策树的离散化" class="headerlink" title="基于决策树的离散化"></a>基于决策树的离散化</h2><p>基于决策树的方法利用决策树的分割规则进行离散化，将连续特征分割成多个区间，通常用于有监督学习中的离散化。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from sklearn.tree import DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成连续数据</span></span><br><span class="line">data = np.random.randn(1000)</span><br><span class="line">target = np.random.randint(0, 2, size=1000)  <span class="comment"># 假设目标变量是二分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将连续数据转化为二维数组</span></span><br><span class="line">X = data.reshape(-1, 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用决策树进行离散化</span></span><br><span class="line">clf = DecisionTreeClassifier(max_leaf_nodes=5)</span><br><span class="line">clf.fit(X, target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个样本所属的区间</span></span><br><span class="line">labels = clf.apply(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看离散化结果</span></span><br><span class="line"><span class="built_in">print</span>(pd.Series(labels).value_counts())</span><br></pre></td></tr></table></figure></div>

<h2 id="分位数离散法"><a href="#分位数离散法" class="headerlink" title="分位数离散法"></a>分位数离散法</h2><p>分位数离散化的核心思想是：<br>按照数据的累积分布函数 (CDF) 计算分位点。<br>根据分位数（如四分位数 (quartiles)、十分位数 (deciles)）划分数据，使得每个区间的样本数接近相等。<br>由于基于数据的分布进行划分，适用于非均匀分布的数据。</p>
<p>以下是不同的方法进行实现</p>
<div class="tabs" id="tab-分位数离散法实现方法"><ul class="nav-tabs"><li class="tab active"><a class="#分位数离散法实现方法-1">方法一</a></li><li class="tab"><a class="#分位数离散法实现方法-2">方法二</a></li></ul><div class="tab-content"><div class="tab-pane active" id="分位数离散法实现方法-1"><p><strong>使用pandas.qcut()</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 1000 个随机数据</span></span><br><span class="line">data = np.random.randn(1000)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 qcut 进行分位数离散化（四分位）</span></span><br><span class="line">bins = pd.qcut(data, q=4, labels=[<span class="string">&#x27;Q1&#x27;</span>, <span class="string">&#x27;Q2&#x27;</span>, <span class="string">&#x27;Q3&#x27;</span>, <span class="string">&#x27;Q4&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个分箱的数据量</span></span><br><span class="line"><span class="built_in">print</span>(bins.value_counts())</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="分位数离散法实现方法-2"><p><strong>使用numpy.percentile()</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 1000 个随机数据</span></span><br><span class="line">data = np.random.randn(1000)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 10 分位数（十分位数）</span></span><br><span class="line">percentiles = np.percentile(data, q=[10, 20, 30, 40, 50, 60, 70, 80, 90])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 np.digitize 进行分箱</span></span><br><span class="line">bins = np.digitize(data, percentiles)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个分箱的数据量</span></span><br><span class="line"><span class="built_in">print</span>(np.bincount(bins))</span><br></pre></td></tr></table></figure></div></div></div></div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>分位数离散化的优缺点</p>

    </div>
    <div class="notel-content">
      <p>✅ 优点<br>适用于非均匀分布数据，相比于等宽离散化更合理。<br>避免某些区间数据过多或过少，能够更好地均衡数据。<br>能够减少异常值的影响，因为分箱是基于数据分布，而不是固定范围。</p>
<p>❌ 缺点<br>对极端值敏感，如果数据中有极端值，可能会影响分位数计算结果。<br>区间边界难以解释，不像等宽分箱那样有固定的区间宽度。<br>对新数据可能需要重新计算分位点，导致难以适用于流式数据。</p>

    </div>
  </div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>何时使用分位数离散化？</p>

    </div>
    <div class="notel-content">
      <p>数据分布不均匀（例如数据集中在某些范围）。<br>避免某些区间样本过多或过少，如在决策树、统计建模等场景中使用。<br>希望减少异常值的影响，避免极端值导致不均匀的划分。</p>

    </div>
  </div>

<h2 id="基于卡方分裂的离散法"><a href="#基于卡方分裂的离散法" class="headerlink" title="基于卡方分裂的离散法"></a>基于卡方分裂的离散法</h2><p>该分裂算法是把整个属性的取值区间当做一个离散的属性值，然后对该区间进行划分，一般是一分为二，即把一个区间分为两个相邻的区间，每个区间对应一个离散的属性值，该划分可以一直进行下去，直到满足某种停止条件，其关键是划分点的选取。</p>
<p><strong>方法一</strong><br><strong>手动实现</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">from scipy.stats import chi2_contingency</span><br><span class="line"></span><br><span class="line">def chi2_value(freq_table):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;计算卡方值&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    chi2, p, _, _ = chi2_contingency(freq_table)</span><br><span class="line">    <span class="built_in">return</span> chi2</span><br><span class="line"></span><br><span class="line">def chimerge(data, target, max_bins=5):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    基于卡方分裂的离散化方法（ChiMerge）</span></span><br><span class="line"><span class="string">    :param data: 连续特征（NumPy 数组或 Pandas Series）</span></span><br><span class="line"><span class="string">    :param target: 目标变量（分类变量）</span></span><br><span class="line"><span class="string">    :param max_bins: 期望的最大分箱数</span></span><br><span class="line"><span class="string">    :return: 分箱边界</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">df</span> = pd.DataFrame(&#123;<span class="string">&#x27;feature&#x27;</span>: data, <span class="string">&#x27;target&#x27;</span>: target&#125;)</span><br><span class="line">    <span class="built_in">df</span> = df.sort_values(by=<span class="string">&#x27;feature&#x27;</span>).reset_index(drop=True)  <span class="comment"># 按特征值排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计每个特征值下的类别频次</span></span><br><span class="line">    freq_table = df.groupby(<span class="string">&#x27;feature&#x27;</span>)[<span class="string">&#x27;target&#x27;</span>].value_counts().unstack().fillna(0)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始边界（每个值单独作为一个区间）</span></span><br><span class="line">    bins = list(freq_table.index)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(bins) &gt; max_bins:  <span class="comment"># 直到达到最大分箱数</span></span><br><span class="line">        min_chi2 = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        min_index = -1</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历所有相邻区间，找到卡方值最小的区间</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bins) - 1):</span><br><span class="line">            merged_table = freq_table.loc[[bins[i], bins[i + 1]]].<span class="built_in">sum</span>(axis=0).values.reshape(2, -1)</span><br><span class="line">            chi2 = chi2_value(merged_table)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> chi2 &lt; min_chi2:  <span class="comment"># 找到最小的卡方值</span></span><br><span class="line">                min_chi2 = chi2</span><br><span class="line">                min_index = i</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 合并卡方值最小的区间</span></span><br><span class="line">        bins[min_index] = (bins[min_index] + bins[min_index + 1]) / 2</span><br><span class="line">        bins.pop(min_index + 1)  <span class="comment"># 删除合并的区间</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> bins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">np.random.seed(42)</span><br><span class="line">data = np.random.randn(100) * 10 + 50  <span class="comment"># 生成随机数</span></span><br><span class="line">target = np.random.choice([0, 1], size=100)  <span class="comment"># 二分类目标变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分箱边界</span></span><br><span class="line">bin_edges = chimerge(data, target, max_bins=4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方分裂后的分箱边界:&quot;</span>, bin_edges)</span><br></pre></td></tr></table></figure></div>

<p><strong>方法二</strong><br><strong>使用optbinning库</strong></p>
<p>如果不想手动实现，可以使用 optbinning 库，它可以进行最优分箱（Optimal Binning），内部使用 ChiMerge 或者 Decision Tree 进行离散化。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from optbinning import OptimalBinning</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">np.random.seed(42)</span><br><span class="line">data = np.random.randn(100) * 10 + 50</span><br><span class="line">target = np.random.choice([0, 1], size=100)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 OptimalBinning 进行卡方离散化</span></span><br><span class="line">optb = OptimalBinning(name=<span class="string">&quot;feature&quot;</span>, dtype=<span class="string">&quot;numerical&quot;</span>, solver=<span class="string">&quot;cp&quot;</span>)</span><br><span class="line">optb.fit(data, target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取分箱边界</span></span><br><span class="line">bin_edges = optb.splits</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;自动计算的分箱边界:&quot;</span>, bin_edges)</span><br></pre></td></tr></table></figure></div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>ChiMerge的优缺点</p>

    </div>
    <div class="notel-content">
      <p>✅ 优点<br>保持类别信息：确保离散化后不同类别仍然可以区分，提高模型效果。<br>自动确定最优分箱：基于卡方值合并区间，减少信息损失。<br>避免过度离散化：不像等宽分箱或等频分箱可能导致信息丢失。</p>
<p>❌ 缺点<br>计算量较大：随着样本数增加，计算卡方统计量的复杂度会增加。<br>依赖类别变量：只能用于分类任务，如果目标变量是连续值，需要先离散化。<br>需要调整超参数：最大分箱数 max_bins 需要根据数据调优。</p>

    </div>
  </div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>何时使用ChiMerge</p>

    </div>
    <div class="notel-content">
      <p>分类任务：目标变量是离散类别（如二分类、多分类）。<br>决策树模型：离散化后可以提升决策树模型的可解释性。<br>数据量较大：对于大规模数据，可通过 optbinning 等库加速处理。</p>

    </div>
  </div>

<p>ChiMerge 离散化适用于分类任务，可以在决策树、朴素贝叶斯等模型中提升效果。对于回归任务，可以考虑 KMeans 或 等宽&#x2F;等频分箱。</p>
<h2 id="1R离散法"><a href="#1R离散法" class="headerlink" title="1R离散法"></a>1R离散法</h2><p>1R 就是 1-rule，称为1 规则，也就是产生一层的决策树，用一个规则集的形式，只在某个特定的属性上进行测试。1R是一个简单廉价的方法，但却常常能得到令人吃惊的准确率。<br>它的核心思想是：<br>将连续特征划分为多个区间，然后<br>寻找能够最好地预测目标变量（类别）的区间划分。</p>
<p>1R 方法的基本步骤如下：<br>对特征值排序。<br>尝试不同的分箱方法（等宽、等频、信息增益等），并计算分类错误率。<br>选择错误率最低的分箱方式作为最终的离散化方式。</p>
<p><strong>方法一</strong><br><strong>手动实现</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">def one_r_discretization(data, target, max_bins=5):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    基于 1R 规则的离散化方法</span></span><br><span class="line"><span class="string">    :param data: 连续特征 (NumPy 数组或 Pandas Series)</span></span><br><span class="line"><span class="string">    :param target: 目标变量 (分类变量)</span></span><br><span class="line"><span class="string">    :param max_bins: 期望的最大分箱数</span></span><br><span class="line"><span class="string">    :return: 最优分箱边界</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">df</span> = pd.DataFrame(&#123;<span class="string">&#x27;feature&#x27;</span>: data, <span class="string">&#x27;target&#x27;</span>: target&#125;)</span><br><span class="line">    <span class="built_in">df</span> = df.sort_values(by=<span class="string">&#x27;feature&#x27;</span>).reset_index(drop=True)  <span class="comment"># 按特征值排序</span></span><br><span class="line"></span><br><span class="line">    best_bins = None</span><br><span class="line">    best_error = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 尝试不同分箱方式</span></span><br><span class="line">    <span class="keyword">for</span> bins <span class="keyword">in</span> range(2, max_bins + 1):</span><br><span class="line">        <span class="built_in">df</span>[<span class="string">&#x27;bin&#x27;</span>] = pd.cut(<span class="built_in">df</span>[<span class="string">&#x27;feature&#x27;</span>], bins=bins, labels=False)  <span class="comment"># 进行分箱</span></span><br><span class="line">        bin_stats = df.groupby(<span class="string">&#x27;bin&#x27;</span>)[<span class="string">&#x27;target&#x27;</span>].agg(lambda x: x.value_counts().index[0])  <span class="comment"># 每个分箱内占比最高的类别</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算错误率</span></span><br><span class="line">        <span class="built_in">df</span>[<span class="string">&#x27;pred&#x27;</span>] = <span class="built_in">df</span>[<span class="string">&#x27;bin&#x27;</span>].map(bin_stats)</span><br><span class="line">        error_rate = (<span class="built_in">df</span>[<span class="string">&#x27;pred&#x27;</span>] != <span class="built_in">df</span>[<span class="string">&#x27;target&#x27;</span>]).mean()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选择错误率最低的分箱方案</span></span><br><span class="line">        <span class="keyword">if</span> error_rate &lt; best_error:</span><br><span class="line">            best_error = error_rate</span><br><span class="line">            best_bins = <span class="built_in">df</span>[<span class="string">&#x27;bin&#x27;</span>].unique()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> best_bins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">np.random.seed(42)</span><br><span class="line">data = np.random.randn(100) * 10 + 50  <span class="comment"># 生成随机数</span></span><br><span class="line">target = np.random.choice([0, 1], size=100)  <span class="comment"># 目标变量（0 或 1）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分箱边界</span></span><br><span class="line">bin_edges = one_r_discretization(data, target, max_bins=4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1R 规则下的最佳分箱边界:&quot;</span>, bin_edges)</span><br></pre></td></tr></table></figure></div>

<p><strong>方法二</strong><br><strong>使用KBinsDiscretizer</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import KBinsDiscretizer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">data = data.reshape(-1, 1)  <span class="comment"># 需要转换为 2D 数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用监督式分箱</span></span><br><span class="line">discretizer = KBinsDiscretizer(n_bins=4, encode=<span class="string">&#x27;ordinal&#x27;</span>, strategy=<span class="string">&#x27;uniform&#x27;</span>)</span><br><span class="line">binned_data = discretizer.fit_transform(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1R 近似分箱结果:&quot;</span>, np.unique(binned_data))</span><br></pre></td></tr></table></figure></div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>1R方法的优缺点</p>

    </div>
    <div class="notel-content">
      <p>✅ 优点<br>监督式分箱：保留目标变量信息，减少信息损失。<br>简单易懂：规则明确，适合初步数据探索。<br>适用于分类任务：尤其适用于决策树、朴素贝叶斯等分类模型。</p>
<p>❌ 缺点<br>计算复杂度较高：需要尝试多个分箱方案，计算错误率。<br>可能过拟合：如果 max_bins 过大，可能导致分箱过多，导致模型过拟合。<br>仅适用于分类任务：如果目标变量是连续值，需要先进行离散化。</p>

    </div>
  </div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>何时使用1R离散化？</p>

    </div>
    <div class="notel-content">
      <p>分类任务（目标变量是离散类别，如 0&#x2F;1 或 A&#x2F;B&#x2F;C）。<br>数据探索：快速找到能够划分类别的最优分箱方式。<br>决策树建模：如 CART、ID3、C4.5 等模型。</p>

    </div>
  </div>

<h2 id="二值化离散法"><a href="#二值化离散法" class="headerlink" title="二值化离散法"></a>二值化离散法</h2><p>二值化离散法是一种简单且常用的离散化方法，它的基本思想是 将连续变量转换为两个类别（0 和 1），即：<br>小于某个阈值的设为 0<br>大于等于某个阈值的设为 1</p>
<p>这种方法特别适用于需要转换成 布尔值（Boolean） 的场景，如 信用评分、风险预测 或 神经网络中的二元特征输入。</p>
<p><strong>方法一</strong><br><strong>手动二值化</strong></p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">np.random.seed(42)</span><br><span class="line">data = np.random.randn(10) * 10 + 50  <span class="comment"># 生成 10 个均值为 50 的随机数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定阈值（如50）</span></span><br><span class="line">threshold = 50</span><br><span class="line">binarized_data_fixed = (data &gt;= threshold).astype(int)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均值二值化</span></span><br><span class="line">threshold_mean = np.mean(data)</span><br><span class="line">binarized_data_mean = (data &gt;= threshold_mean).astype(int)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数二值化</span></span><br><span class="line">threshold_median = np.median(data)</span><br><span class="line">binarized_data_median = (data &gt;= threshold_median).astype(int)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 75% 分位数二值化</span></span><br><span class="line">threshold_percentile = np.percentile(data, 75)</span><br><span class="line">binarized_data_percentile = (data &gt;= threshold_percentile).astype(int)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;Original Data&#x27;</span>: data,</span><br><span class="line">    <span class="string">&#x27;Fixed Threshold&#x27;</span>: binarized_data_fixed,</span><br><span class="line">    <span class="string">&#x27;Mean Threshold&#x27;</span>: binarized_data_mean,</span><br><span class="line">    <span class="string">&#x27;Median Threshold&#x27;</span>: binarized_data_median,</span><br><span class="line">    <span class="string">&#x27;Percentile Threshold&#x27;</span>: binarized_data_percentile</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">df</span>)</span><br></pre></td></tr></table></figure></div>
<p><strong>方法二</strong><br><strong>使用 sklearn 进行二值化</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import Binarizer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定固定阈值</span></span><br><span class="line">binarizer = Binarizer(threshold=50)  <span class="comment"># 以50为阈值</span></span><br><span class="line">binarized_data = binarizer.fit_transform(data.reshape(-1, 1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;二值化后的数据:\n&quot;</span>, binarized_data.flatten())</span><br></pre></td></tr></table></figure></div>

<p><strong>方法三</strong><br><strong>监督式二值化（基于决策树）</strong></p>
<p>如果有分类标签 Y，可以使用决策树来学习最佳的二值化阈值：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.tree import DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设目标变量 Y</span></span><br><span class="line">target = np.random.choice([0, 1], size=len(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练决策树</span></span><br><span class="line">tree = DecisionTreeClassifier(max_depth=1)  <span class="comment"># 只允许一层分裂</span></span><br><span class="line">tree.fit(data.reshape(-1, 1), target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最优的分裂阈值</span></span><br><span class="line">optimal_threshold = tree.tree_.threshold[0]</span><br><span class="line">binarized_data_tree = (data &gt;= optimal_threshold).astype(int)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;决策树选择的最优二值化阈值: &#123;optimal_threshold&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;基于决策树的二值化结果:&quot;</span>, binarized_data_tree)</span><br></pre></td></tr></table></figure></div>


  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>何时使用二值化？</p>

    </div>
    <div class="notel-content">
      <p>✅ 适用场景<br>逻辑回归或朴素贝叶斯模型（需要布尔特征）。<br>信用评分、欺诈检测（例如：收入是否高于某个值？）。<br>生物信息学（例如：基因表达水平是否超过某个阈值？）。<br>特征筛选（减少噪声，提高模型可解释性）。<br>规则挖掘（如 Apriori 算法）（将数据转换为 0&#x2F;1 格式）。</p>
<p>❌ 不适用场景<br>信息损失严重：如果数据本身具有重要的连续性信息（如温度、房价），二值化可能会损失过多信息。<br>非布尔场景：如果数据有多个类别，建议使用多级离散化（如分箱）。</p>

    </div>
  </div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MCP介绍及其创建使用</title>
    <url>/zhihaojiang.github.io/2025/03/30/20250330MCP%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%85%B6%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="MCP是什么"><a href="#MCP是什么" class="headerlink" title="MCP是什么"></a>MCP是什么</h2><p>MCP（Model Context Protocol，模型上下文协议）是由 Anthropic 于 2024 年 11 月推出的一种开放标准协议，旨在统一大型语言模型（LLM）与外部数据源和工具之间的通信方式。​<br><strong>Model Context Protocol (MCP)</strong><br>MCP 是一个标准协议，就像给 AI 大模型装了一个 “万能接口”，让 AI 模型能够与不同的数据源和工具进行无缝交互。它就像 USB-C 接口一样，提供了一种标准化的方法，将 AI 模型连接到各种数据源和工具。<br>MCP 旨在替换碎片化的 Agent 代码集成，从而使 AI 系统更可靠，更有效。通过建立通用标准，服务商可以基于协议来推出它们自己服务的 AI 能力，从而支持开发者更快的构建更强大的 AI 应用。开发者也不需要重复造轮子，通过开源项目可以建立强大的 AI Agent 生态。<br>MCP 的核心概念包括：</p>
<ol>
<li>上下文共享：​应用程序可以通过 MCP 向模型提供所需的上下文信息，如文件内容、数据库记录等，增强模型的理解和生成能力。</li>
<li>工具暴露：​MCP 允许应用程序将功能（如文件读写、API 调用）暴露给模型，模型可以调用这些工具完成复杂任务。​</li>
<li>可组合的工作流：​开发者可以利用 MCP 集成多个服务和组件，构建灵活、可扩展的 AI 工作流。​</li>
<li>安全性：​通过本地服务器运行，MCP 避免将敏感数据上传至第三方平台，确保数据隐私。 ​</li>
</ol>
<p>MCP 的架构主要由以下组件组成：</p>
<ol>
<li>MCP 主机（Host）：​如 Claude Desktop、IDE 或其他 AI 工具，即大模型的应用。​</li>
<li>MCP 客户端（Client）：​在主机应用内的连接器，负责与 MCP 服务器建立连接。​</li>
<li>MCP 服务器（Server）：​实现 MCP 协议的程序，提供特定功能或数据资源，供客户端访问。​</li>
<li>远程服务：​如 Slack、GitHub API 等，MCP 服务器可以连接的外部服务。 ​</li>
</ol>
<p>通过 MCP，AI 模型可以直接与数据源建立标准化的连接，避免了为每个新数据源定制对接方案的繁琐过程，从而实现真正的互联互通。</p>
<p>MCP（Model Context Protocol）允许你定义和暴露自定义的函数（工具），让大模型调用这些工具来完成特定任务。例如，你可以构建一个函数，让模型查询数据库、读取文件、调用 API，甚至执行本地计算。</p>
<h2 id="MCP-让模型调用工具的方式"><a href="#MCP-让模型调用工具的方式" class="headerlink" title="MCP 让模型调用工具的方式"></a>MCP 让模型调用工具的方式</h2><p><strong>定义一个工具（函数）</strong><br>在本地或远程服务器上编写一个 API 或函数，例如：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">def get_weather(city):</span><br><span class="line">    <span class="comment"># 这里可以调用真实的天气 API</span></span><br><span class="line">    <span class="built_in">return</span> f<span class="string">&quot;&#123;city&#125; 当前气温 25°C，晴天&quot;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>通过 MCP 暴露该工具</strong><br>通过 MCP 让大模型知道这个工具的存在，并允许它调用。例如，在 Claude 或其他支持 MCP 的环境中，模型可以动态调用你的 get_weather(city) 函数。<br><strong>模型调用工具</strong><br>当用户询问「北京的天气如何？」时，模型可以自动调用 get_weather(“北京”)，并将结果返回给用户，而不是依赖自身训练的数据。</p>
<h2 id="创建并使用的流程"><a href="#创建并使用的流程" class="headerlink" title="创建并使用的流程"></a>创建并使用的流程</h2><p>以get_weather为例<br>我们首先创建一个.py文件叫weather<br>在文件中输入下述代码</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from mcp import MCPServer, tool</span><br><span class="line"></span><br><span class="line">class WeatherServer(MCPServer):</span><br><span class="line">    @tool</span><br><span class="line">    def get_weather(self, city: str) -&gt; str:</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        获取指定城市的天气信息。</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 调用天气 API 获取数据</span></span><br><span class="line">        api_key = <span class="string">&#x27;您的API密钥&#x27;</span></span><br><span class="line">        response = requests.get(f<span class="string">&#x27;http://api.weatherapi.com/v1/current.json?key=&#123;api_key&#125;&amp;q=&#123;city&#125;&amp;lang=zh&#x27;</span>)</span><br><span class="line">        data = response.json()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;error&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">            <span class="built_in">return</span> f<span class="string">&quot;无法获取&#123;city&#125;的天气信息。&quot;</span></span><br><span class="line">        weather = data[<span class="string">&#x27;current&#x27;</span>][<span class="string">&#x27;condition&#x27;</span>][<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">        temp_c = data[<span class="string">&#x27;current&#x27;</span>][<span class="string">&#x27;temp_c&#x27;</span>]</span><br><span class="line">        <span class="built_in">return</span> f<span class="string">&quot;&#123;city&#125;当前天气：&#123;weather&#125;，气温：&#123;temp_c&#125;°C。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    server = WeatherServer()</span><br><span class="line">    server.run()</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>记得安装必要的库</p>

    </div>
    <div class="notel-content">
      <p>pip install mcp-server</p>

    </div>
  </div>
<p>这样，MCP工具就做好了</p>
<p>之后，我们要将这个工具告诉AI<br>打开一个支持MCP的AI软件或网站 这里我使用vs code中的cline插件<br>在插件设置中找到MCP Servers -&gt; installed -&gt; Configure MCP Server 点击<br>会进入到一个叫cline_mcp_settings.json的文档<br>里面应该是这样的</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在mcpServers中插入你写的工具</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;weather&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;command&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">      <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--directory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/Volumes/HIKSEMI/mcp_server&quot;</span>,</span><br><span class="line">        <span class="string">&quot;run&quot;</span>,</span><br><span class="line">        <span class="string">&quot;weather.py&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>记得安装必要的库</p>

    </div>
    <div class="notel-content">
      <p>“weather”: { -&gt; 这个是你的MCP工具的名字 可以自己随便取</p>
<p>“command”: “python” -&gt;这个是告诉他使用 python 命令来运行 Python 解释器 启动服务器</p>
<p>“args”: [<br>        “–directory”, -&gt;这个选项通常用来告诉服务器在哪个路径下查找需要的资源 或者在该目录下运行服务器<br>        “&#x2F;Volumes&#x2F;HIKSEMI&#x2F;mcp_server”, -&gt;这是指定你weather.py的路径<br>        “run”, -&gt; 这个是告诉程序去执行接下来的操作 即运行指定的Python脚本<br>        “weather.py” -&gt; 这是要执行的 Python 脚本的名称</p>

    </div>
  </div>

<p>保存好后会在下面看见你的MCP工具已经启用了 在向大模型询问天气时 他会优先查询是否有可用的MCP工具 并按照对应的格式给出答复</p>
]]></content>
      <categories>
        <category>科技</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>MCP</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>字母在字符串中的百分比</title>
    <url>/zhihaojiang.github.io/2025/03/31/20250331%E5%AD%97%E6%AF%8D%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s 和一个字符 letter ，返回在 s 中等于 letter 字符所占的 百分比 ，向下取整到最接近的百分比。</p>
<p>示例 1：</p>
<p>输入：s &#x3D; “foobar”, letter &#x3D; “o”<br>输出：33<br>解释：<br>等于字母 ‘o’ 的字符在 s 中占到的百分比是 2 &#x2F; 6 * 100% &#x3D; 33% ，向下取整，所以返回 33 。<br>示例 2：</p>
<p>输入：s &#x3D; “jjjj”, letter &#x3D; “k”<br>输出：0<br>解释：<br>等于字母 ‘k’ 的字符在 s 中占到的百分比是 0% ，所以返回 0 。</p>
<p>提示：</p>
<p>1 &lt;&#x3D; s.length &lt;&#x3D; 100<br>s 由小写英文字母组成<br>letter 是一个小写英文字母</p>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">方法一</a></li><li class="tab"><a class="#first-unique-name-2">方法二</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>正常思路</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def percentageLetter(self, s, letter):</span><br><span class="line">        n = len(s)  <span class="comment">#把长度赋值给n</span></span><br><span class="line">        count = 0   <span class="comment">#初始化统计个数变量</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> s: <span class="comment">#从字符串第一个字符开始循环</span></span><br><span class="line">            <span class="keyword">if</span> index == letter: <span class="comment">#如果s的下标index和我们要找的字符letter相同</span></span><br><span class="line">                count += 1  <span class="comment">#+1</span></span><br><span class="line">        <span class="built_in">return</span> 100 * count // n <span class="comment">#个数比总数在乘以100%就得到了其百分比</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-unique-name-2"><p><strong>python库实现</strong></p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> class Solution:</span><br><span class="line">    def percentageLetter(self, s: str, letter: str) -&gt; int:</span><br><span class="line">        <span class="built_in">return</span> s.count(letter) * 100 // len(s)  <span class="comment">#主要用到了count()函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#作者：灵茶山艾府</span></span><br><span class="line"><span class="comment">#链接：https://leetcode.cn/problems/percentage-of-letter-in-string/solutions/#1510439/ku-han-shu-mo-ni-by-endlesscheng-fqad/</span></span><br><span class="line"><span class="comment">#来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">#著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>λ演算</title>
    <url>/zhihaojiang.github.io/2025/04/01/20250401%CE%BB%E6%BC%94%E7%AE%97/</url>
    <content><![CDATA[<p>在B站看到了有人讲解λ演算 很感兴趣 于是去了解了一下<br>原视频：<a class="link"   href="https://www.youtube.com/watch?v=RcVA8Nj6HEo&t=44s" >https://www.youtube.com/watch?v=RcVA8Nj6HEo&amp;t=44s<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>原视频很精彩 图文描述 我也是看了这个视频写的 推荐观看</p>
<h2 id="什么是λ演算"><a href="#什么是λ演算" class="headerlink" title="什么是λ演算"></a>什么是λ演算</h2><p>λ演算（Lambda Calculus）是一种用于研究函数定义、函数应用和递归的数学逻辑系统 由阿隆佐·丘奇（Alonzo Church）在 1930 年代提出。它是计算理论的基础之一 并在编程语言的设计中发挥了重要作用 特别是对函数式编程语言（如 Haskell、Lisp 和 ML）有深远的影响 </p>
<p>诶 这里学过python的人肯定想到了 python中有个lambda表达式 是不是和这个λ演算相关呢<br>没错 Python 中的 lambda 表达式确实与 λ（Lambda）演算有关系 但它只是 λ演算的一个简单应用 并没有完全实现 λ演算的全部概念 这里不过多叙述 只是告诉大家他们之间确实有关系</p>
<h2 id="λ演算的基本概念"><a href="#λ演算的基本概念" class="headerlink" title="λ演算的基本概念"></a>λ演算的基本概念</h2><p>λ演算由三种基本表达式组成：</p>
<ul>
<li>变量：例如 x、y，代表某个值。</li>
<li>λ抽象（Lambda Abstraction）：用于定义匿名函数，例如 λx.x+1 表示“输入 x，返回 x+1”</li>
<li>函数应用（Function Application）：用于调用函数，例如 (λx.x+1) 2，表示将 2 代入 λx.x+1，结果为 3</li>
</ul>
<h3 id="λ表达式"><a href="#λ表达式" class="headerlink" title="λ表达式"></a>λ表达式</h3><p>在λ演算中 主要有三类样式：</p>
<ul>
<li>括号：()</li>
<li>变量：x, y, z…</li>
<li>“λ”和”.”:λ和.总是成对出现</li>
</ul>
<p>这样 我们就有了三个模版：</p>
<ul>
<li>(_ _)</li>
<li>a</li>
<li>(λa._)</li>
</ul>
<p>这里的下划线可以填入上述任意模块 a是一个变量 我们可以像搭积木一样进行构造<br>例如：<br>((λa.y)(λx.(λc.e)))<br>并且 这些变量也可以是一个函数</p>
<h3 id="结合代码理解"><a href="#结合代码理解" class="headerlink" title="结合代码理解"></a>结合代码理解</h3><p>上述的a其实就是一个变量 并且他也可以看成一个函数<br>现在我们重点看看( _ _ ) 和 ( λa._ )</p>
<p>(_ _)可以理解为</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以(ab)为例</span></span><br><span class="line"><span class="comment">#将左边的a看成一个函数</span></span><br><span class="line"><span class="comment">#右边的b就是这个函数a的输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为了方便理解 我们定义一个函数 叫a</span></span><br><span class="line">def a(x):</span><br><span class="line">    <span class="built_in">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment">#先别管变量output 右边的a(b)等价于λ演算中的(ab)</span></span><br><span class="line">output = a(b)</span><br></pre></td></tr></table></figure></div>

<p>(λa._)可以理解为</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以(λx.y)为例</span></span><br><span class="line">def fun(x):</span><br><span class="line">    <span class="built_in">return</span> y</span><br></pre></td></tr></table></figure></div>

<p>这些就是λ表达式的内容</p>
<h2 id="λ图"><a href="#λ图" class="headerlink" title="λ图"></a>λ图</h2><p>有很多种可视化λ图</p>
<ol>
<li>Tromp图表：<a class="link"   href="https://tromp.github.io/cl/diagrams.html" >https://tromp.github.io/cl/diagrams.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>David C Keenan的λ演算图形符号：<a class="link"   href="https://dkeenan.com/Lambda/" >https://dkeenan.com/Lambda/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>de Bruijn索引：<a class="link"   href="https://en.wikipedia.org/wiki/De_Bruijn_index" >https://en.wikipedia.org/wiki/De_Bruijn_index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> </li>
<li>Vex（Wayne Citrin，Richard Hall，Benjamin Zorn）：<a class="link"   href="https://www.researchgate.net/publication/2726047_Programming_with_Visual_Expressions" >https://www.researchgate.net/publication/2726047_Programming_with_Visual_Expressions<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> </li>
<li>视觉λ演算（Viktor Massalõgin）：<a class="link"   href="https://github.com/bntre/visual-lambda" >https://github.com/bntre/visual-lambda<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
<h2 id="λ演算的计算规则"><a href="#λ演算的计算规则" class="headerlink" title="λ演算的计算规则"></a>λ演算的计算规则</h2><p>λ演算主要有三个计算规则：</p>
<ol>
<li>α-变换（Alpha Conversion）</li>
<li>β-规约（Beta Reduction）</li>
<li>η-变换（Eta Conversion）</li>
</ol>
<h3 id="α-变换（Alpha-Conversion）"><a href="#α-变换（Alpha-Conversion）" class="headerlink" title="α-变换（Alpha Conversion）"></a>α-变换（Alpha Conversion）</h3><p>简单来说就是变量重命名</p>
<blockquote>
<p>λx.x &#x3D; λy.y</p>
</blockquote>
<p>只要不影响表达式的意义 就可以更改变量名称 就像你可以随意地取变量名</p>
<h3 id="β-规约"><a href="#β-规约" class="headerlink" title="β-规约"></a>β-规约</h3><p>函数应用的计算<br>我们来看这样的一个式子：</p>
<blockquote>
<p>((λx.x+2)3)</p>
</blockquote>
<p>根据前文的理解<br>我们逐步进行分析<br>首先来看内层的(λx.x+2)<br>这个意思相当于是 我们定义个一个函数叫x 函数的返回值是x + 2</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#(λx.x+2)</span></span><br><span class="line">def x(x):</span><br><span class="line">    <span class="built_in">return</span> x + 2</span><br></pre></td></tr></table></figure></div>

<p>接下来我们看外层 还记得前面说的</p>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>引用</p>

    </div>
    <div class="notel-content">
      <p>以(ab)为例<br>将左边的a看成一个函数<br>右边的b就是这个函数a的输入</p>

    </div>
  </div>
<p>现在把刚才的(λx.x+2)看成a 把3看成b</p>
<p>于是 ((λx.x+2)3)就可以用python写成</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">def x(x):</span><br><span class="line">    <span class="built_in">return</span> x + 2</span><br><span class="line">    </span><br><span class="line">output = x(3)</span><br></pre></td></tr></table></figure></div>
<p>其用数学符号就是</p>
<blockquote>
<p>3 + 2</p>
</blockquote>
<p>综上 ((λx.x+2)3)等价于 3 + 2</p>
<h3 id="η-变换"><a href="#η-变换" class="headerlink" title="η-变换"></a>η-变换</h3><p>函数等价转换<br>先给出定义</p>
<blockquote>
<p>λx.fx 等价于 f</p>
</blockquote>
<p>只要 f 在所有输入 x 上都保持不变 那么 λx. f x 和 f 是等价的<br>什么意思呢<br>以f(x) &#x3D; x + 3为例</p>
<p>假设有f(x) &#x3D; x + 3<br>在 λ 形式下 他可以表示为</p>
<blockquote>
<p>f &#x3D; λx. x + 1</p>
</blockquote>
<p>那么 λx.fx 等价于 f 即</p>
<blockquote>
<p>λx. (λx. x + 1) x  ≡  λx. x + 1</p>
</blockquote>
<h2 id="自由变量与束缚变量"><a href="#自由变量与束缚变量" class="headerlink" title="自由变量与束缚变量"></a>自由变量与束缚变量</h2><p>定义</p>
<ul>
<li><p>束缚变量（Bound Variable）<br>如果一个变量 x 出现在 λx.M 这样的函数定义中 并且 x 是由 λx 绑定的 则 x 是束缚变量<br>简单理解：变量被 λ 绑定 就称为束缚变量 </p>
</li>
<li><p>自由变量（Free Variable）<br>如果一个变量 x 在 λ 表达式中出现 但没有被任何 λ 绑定 则 x 是自由变量<br>简单理解：变量没有被 λ 绑定 它就是自由变量</p>
</li>
</ul>
<h3 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">λx. y  // 变量 y 是自由变量</span><br></pre></td></tr></table></figure></div>

<h3 id="束缚变量"><a href="#束缚变量" class="headerlink" title="束缚变量"></a>束缚变量</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">λx. x  // 变量 x 是束缚变量</span><br></pre></td></tr></table></figure></div>

<h2 id="组合子"><a href="#组合子" class="headerlink" title="组合子"></a>组合子</h2><p>在λ演算中，组合子（Combinator） 是指 没有自由变量 的 λ 表达式 也就是说 组合子是 只包含束缚变量 的 λ 表达式 它们是纯粹的函数抽象 不依赖于外部环境 因此它们可以被认为是“自给自足”的函数 </p>
<p>组合子 之所以叫这个名字 是因为它们不依赖外部的变量或环境 只能依赖自己定义的参数 并且可以通过组合多个组合子来构建复杂的计算 组合子本质上是 λ 演算中的基础构建模块 类似于函数式编程中的高阶函数</p>
<h3 id="恒等组合子"><a href="#恒等组合子" class="headerlink" title="恒等组合子"></a>恒等组合子</h3><p>恒等组合子就是一个接受一个参数并返回这个参数的组合子 它的定义非常简单：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">I = λx. x</span><br></pre></td></tr></table></figure></div>
<p>作用：恒等组合子返回输入参数本身 不做任何改变</p>
<blockquote>
<p>I 5 → 5</p>
</blockquote>
<h3 id="K-组合子"><a href="#K-组合子" class="headerlink" title="K 组合子"></a>K 组合子</h3><p>K 组合子（又叫 K 函数或常量函数）接受两个参数 但只返回第一个参数 它的定义是：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">K = λx. λy. x</span><br></pre></td></tr></table></figure></div>
<p>作用：返回第一个参数 忽略第二个参数</p>
<blockquote>
<p>K 5 10 → 5</p>
</blockquote>
<p>在这个例子中 K 5 返回的是一个函数 λy. 5 再与任何第二个参数（比如 10）结合时 结果依然是 5</p>
<h3 id="S-组合子"><a href="#S-组合子" class="headerlink" title="S 组合子"></a>S 组合子</h3><p>S 组合子（又叫 S 函数）比较复杂 接受三个参数 并执行一些组合操作 它的定义如下：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">S = λx. λy. λz. (x z) (y z)</span><br></pre></td></tr></table></figure></div>
<p>作用：S 组合子将输入的两个函数 x 和 y 应用于相同的参数 z 并将结果作为两个函数的输出</p>
<blockquote>
<p>S (λx. x + 1) (λx. x * 2) 3 → (λx. x + 1) 3  (λx. x * 2) 3<br>                              → 3 + 1    3 * 2<br>                              → 4        6</p>
</blockquote>
<p>S 组合子可以用于组合多个函数，使得它们的输入可以共享。</p>
<h3 id="组合子的性质"><a href="#组合子的性质" class="headerlink" title="组合子的性质"></a>组合子的性质</h3><p>组合子通常具有一些有用的性质 它们可以与其他组合子进行组合 以实现更加复杂的计算 几个重要的性质包括：</p>
<ol>
<li><p>函数应用<br>组合子是纯粹的 λ 演算表达式 它们的行为仅依赖于传入的参数 可以通过函数应用来将它们的计算结果传递给其他组合子 进一步构建复杂的计算</p>
</li>
<li><p>无外部依赖<br>组合子是完全自足的 它们的定义仅依赖于它们自己内部的参数 不需要从外部环境引入其他变量 这使得它们在编程语言和计算机科学中非常重要 尤其是在函数式编程中</p>
</li>
<li><p>高阶函数<br>组合子本质上是高阶函数（Higher-Order Function）它们可以作为输入传递给其他函数 或者返回作为结果 例如，S 组合子通过两个输入函数生成新的函数 具有高度的抽象能力</p>
</li>
</ol>
<h2 id="λ演算的作用"><a href="#λ演算的作用" class="headerlink" title="λ演算的作用"></a>λ演算的作用</h2><p>说了这么多 大家应该会进行一些关于λ演算的计算了 可λ演算有什么用呢 感觉就是换个抽象的形式进行计算<br>其实λ演算本质上是换了一种抽象的方式来进行计算 但它的意义远不止于此</p>
<h3 id="计算理论的基础"><a href="#计算理论的基础" class="headerlink" title="计算理论的基础"></a>计算理论的基础</h3><p>λ演算与图灵机（Turing Machine）一样 是计算理论的两大核心模型之一 它们都能表达可计算函数 但λ演算采用的是纯粹的函数变换 而图灵机基于状态和存储</p>
<ul>
<li>通过 λ演算 可以定义所有可计算的函数 因此它是图灵完备的</li>
<li>计算机科学家用它来研究可计算性、算法复杂度等问题</li>
</ul>
<h3 id="影响现代编程语言"><a href="#影响现代编程语言" class="headerlink" title="影响现代编程语言"></a>影响现代编程语言</h3><p>λ演算是函数式编程的理论基础 影响了 Haskell、Lisp、ML、Scala、JavaScript（匿名函数、箭头函数）、Python（Lambda 表达式）等编程语言 例如</p>
<ul>
<li>匿名函数（Lambda 表达式）</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">add = lambda x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(add(2, 3))  <span class="comment"># 输出 5</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>高阶函数（函数可以作为参数传递）</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">def apply_func(f, x):</span><br><span class="line">    <span class="built_in">return</span> f(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(apply_func(lambda x: x * 2, 10))  <span class="comment"># 输出 20</span></span><br></pre></td></tr></table></figure></div>

<p>现代语言的 闭包（Closure）、惰性求值、纯函数 等概念都源于 λ演算</p>
<h3 id="形式化数学-逻辑推理"><a href="#形式化数学-逻辑推理" class="headerlink" title="形式化数学 &amp; 逻辑推理"></a>形式化数学 &amp; 逻辑推理</h3><p>λ演算被用作数学逻辑的基础，特别是在构造主义数学和类型理论中。例如：</p>
<ul>
<li>Curry-Howard 对应：λ演算中的函数和逻辑推理中的证明之间存在对应关系 程序可以被视为数学证明</li>
<li>依赖类型（Dependent Types）：Coq、Agda 这些数学证明工具都基于λ演算的扩展形式</li>
</ul>
<h3 id="递归与无变量编程"><a href="#递归与无变量编程" class="headerlink" title="递归与无变量编程"></a>递归与无变量编程</h3><p>λ演算能够表示 递归，即使它本身没有显式的循环结构。例如，阶乘可以用 Y 组合子（Y Combinator）来实现：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">factorial = \f. \n. <span class="keyword">if</span> n == 0 <span class="keyword">then</span> 1 <span class="keyword">else</span> n * (f (n - 1))</span><br><span class="line">Y factorial 5   -- 计算 5!</span><br></pre></td></tr></table></figure></div>

<h3 id="编译器优化"><a href="#编译器优化" class="headerlink" title="编译器优化"></a>编译器优化</h3><p>λ演算提供了转换和简化代码的规则 例如：</p>
<ul>
<li>β-规约（函数应用） 可以减少计算步骤 优化执行效率</li>
<li>α-变换（变量重命名） 可避免变量名冲突</li>
<li>η-变换（函数简化） 可以减少不必要的函数包装 提高性能</li>
</ul>
<p>许多编译器（如 GHC Haskell、Scala、Lisp 解释器）都会用 λ演算作为中间表示（IR）帮助优化代码</p>
<h3 id="并发-分布式计算"><a href="#并发-分布式计算" class="headerlink" title="并发 &amp; 分布式计算"></a>并发 &amp; 分布式计算</h3><p>λ演算的无状态特性使其非常适用于并发计算和分布式系统 例如：</p>
<ul>
<li>MapReduce（Google 的大规模数据处理模型）依赖于 λ演算的映射与归约思想</li>
<li>Actor Model（Erlang、Akka）与函数式编程紧密相关 受λ演算启发</li>
</ul>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>解决智力问题</title>
    <url>/zhihaojiang.github.io/2025/04/01/20250401%E8%A7%A3%E5%86%B3%E6%99%BA%E5%8A%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个下标从 0 开始的二维整数数组 questions ，其中 questions[i] &#x3D; [pointsi, brainpoweri] 。</p>
<p>这个数组表示一场考试里的一系列题目，你需要 按顺序 （也就是从问题 0 开始依次解决），针对每个问题选择 解决 或者 跳过 操作。解决问题 i 将让你 获得  pointsi 的分数，但是你将 无法 解决接下来的 brainpoweri 个问题（即只能跳过接下来的 brainpoweri 个问题）。如果你跳过问题 i ，你可以对下一个问题决定使用哪种操作。</p>
<p>比方说，给你 questions &#x3D; [[3, 2], [4, 3], [4, 4], [2, 5]] ：</p>
<ul>
<li>如果问题 0 被解决了， 那么你可以获得 3 分，但你不能解决问题 1 和 2 。</li>
<li>如果你跳过问题 0 ，且解决问题 1 ，你将获得 4 分但是不能解决问题 2 和 3 。</li>
<li>请你返回这场考试里你能获得的 最高 分数。</li>
</ul>
<p>示例 1：</p>
<p>输入：questions &#x3D; [[3,2],[4,3],[4,4],[2,5]]<br>输出：5<br>解释：解决问题 0 和 3 得到最高分。</p>
<ul>
<li>解决问题 0 ：获得 3 分，但接下来 2 个问题都不能解决。</li>
<li>不能解决问题 1 和 2</li>
<li>解决问题 3 ：获得 2 分<br>总得分为：3 + 2 &#x3D; 5 。没有别的办法获得 5 分或者多于 5 分。<br>示例 2：</li>
</ul>
<p>输入：questions &#x3D; [[1,1],[2,2],[3,3],[4,4],[5,5]]<br>输出：7<br>解释：解决问题 1 和 4 得到最高分。</p>
<ul>
<li>跳过问题 0</li>
<li>解决问题 1 ：获得 2 分，但接下来 2 个问题都不能解决。</li>
<li>不能解决问题 2 和 3</li>
<li>解决问题 4 ：获得 5 分<br>总得分为：2 + 5 &#x3D; 7 。没有别的办法获得 7 分或者多于 7 分。</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题需要决定在每个问题上是“解决”还是“跳过” 如果选择解决问题 i 我们将会获得 pointsi 的分数 但接下来的 brainpoweri 个问题会被跳过 如果我们选择跳过问题 i 则直接考虑下一个问题<br>目标是找到能获得的最高分数</p>
<p>使用动态规划<br>设dp[i]是从第i个问题开始 能获得最高分<br>对于每个问题 i 有两种选择</p>
<div class="tabs" id="tab-choice"><ul class="nav-tabs"><li class="tab active"><a class="#choice-1">选择一</a></li><li class="tab"><a class="#choice-2">选择二</a></li></ul><div class="tab-content"><div class="tab-pane active" id="choice-1"><p><strong>解决问题i</strong></p>
<p>可以获得 pointsi 的分数 但需要跳过接下来的 brainpoweri 个问题 因此，总分数为：</p>
<blockquote>
<p>pointsi + dp[i + brainpoweri + 1]</p>
</blockquote>
<p>其中  i + brainpoweri + 1 是下一个可以解决的问题索引 如果其超出了数组范围 则 dp[i + brainpoweri + 1] &#x3D; 0</p></div><div class="tab-pane" id="choice-2"><p><strong>跳过问题i</strong></p>
<p> 不解决问题 i 直接考虑下一个问题 i+1 总分数为：<br> dp[i + 1]</p></div></div></div>

<p>因此 我们要选择两者的最大值</p>
<blockquote>
<p>dp[i] &#x3D; max(pointsi + dp[i + brainpoweri + 1],  dp[i + 1])</p>
</blockquote>
<p>当 i &gt;&#x3D; n（超出数组范围时）dp[i] &#x3D; 0<br>当 i + brainpoweri + 1 &gt;&#x3D; n dp[i + brainpoweri + 1] &#x3D; 0<br>因此最终结果为dp[0] 我们永远要从第一个问题开始才能能获得最高分</p>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">def mostPoints(questions):</span><br><span class="line">    n = len(questions)</span><br><span class="line">    dp = [0] * (n + 1)  <span class="comment"># 初始化 dp 数组，长度为 n+1，dp[n] = 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从后往前填充 dp 数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n - 1, -1, -1):</span><br><span class="line">        points, brainpower = questions[i]</span><br><span class="line">        j = i + brainpower + 1  <span class="comment"># 下一个可以解决的问题索引</span></span><br><span class="line">        <span class="keyword">if</span> j &lt; n:</span><br><span class="line">            solved = points + dp[j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            solved = points  <span class="comment"># 如果 j 超出范围，则没有后续问题</span></span><br><span class="line">        </span><br><span class="line">        skipped = dp[i + 1]  <span class="comment"># 跳过当前问题的分数</span></span><br><span class="line">        </span><br><span class="line">        dp[i] = max(solved, skipped)  <span class="comment"># 取最大值</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> dp[0]  <span class="comment"># 返回从第一个问题开始的最大分数</span></span><br></pre></td></tr></table></figure></div>

<p>怎么样 解决了你的智力问题吗^_^</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>有序三元组中的最大值 I</title>
    <url>/zhihaojiang.github.io/2025/04/02/20250402%E6%9C%89%E5%BA%8F%E4%B8%89%E5%85%83%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%20I/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个下标从 0 开始的整数数组 nums 。</p>
<p>请你从所有满足 i &lt; j &lt; k 的下标三元组 (i, j, k) 中，找出并返回下标三元组的最大值。如果所有满足条件的三元组的值都是负数，则返回 0 。</p>
<p>下标三元组 (i, j, k) 的值等于 (nums[i] - nums[j]) * nums[k] 。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：nums &#x3D; [12,6,1,2,7]<br>输出：77<br>解释：下标三元组 (0, 2, 4) 的值是 (nums[0] - nums[2]) * nums[4] &#x3D; 77 。<br>可以证明不存在值大于 77 的有序下标三元组。</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：nums &#x3D; [1,10,3,4,19]<br>输出：133<br>解释：下标三元组 (1, 2, 4) 的值是 (nums[1] - nums[2]) * nums[4] &#x3D; 133 。<br>可以证明不存在值大于 133 的有序下标三元组。 </p>
</blockquote>
<p>示例 3：</p>
<blockquote>
<p>输入：nums &#x3D; [1,2,3]<br>输出：0<br>解释：唯一的下标三元组 (0, 1, 2) 的值是一个负数，(nums[0] - nums[1]) * nums[2] &#x3D; -3 。因此，答案是 0 。</p>
</blockquote>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">方法一</a></li><li class="tab"><a class="#first-unique-name-2">方法二</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>暴力枚举</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def maximumTripletValue(self, nums):</span><br><span class="line">        n = len(nums)   <span class="comment">#把数组长度赋值给n</span></span><br><span class="line">        result = 0  <span class="comment">#初始化result</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):  <span class="comment">#暴力枚举 3层for循环</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + 1,n):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(j + 1,n):</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] - nums[j]) * nums[k] &gt; result:</span><br><span class="line">                        result = (nums[i] - nums[j]) * nums[k]  <span class="comment">#找出最大值</span></span><br><span class="line">        <span class="keyword">if</span> result &lt; 0:  <span class="comment">#判断结果是否都为负数</span></span><br><span class="line">            <span class="built_in">return</span> 0</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> result</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-unique-name-2"><p><strong>贪心</strong></p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def maximumTripletValue(self, nums: List[int]) -&gt; int:</span><br><span class="line">        n = len(nums)</span><br><span class="line">        res, imax, dmax = 0, 0, 0</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            res = max(res, dmax * nums[k])</span><br><span class="line">            dmax = max(dmax, imax - nums[k])</span><br><span class="line">            imax = max(imax, nums[k])</span><br><span class="line">        <span class="built_in">return</span> res</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https://leetcode.cn/problems/maximum-value-of-an-ordered-triplet-i/solutions/3610891/you-xu-san-yuan-zu-zhong-de-zui-da-zhi-i-y6zb/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习数据分析helper</title>
    <url>/zhihaojiang.github.io/2025/04/07/20250407%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90helper/</url>
    <content><![CDATA[<p>数据分析是一个循环迭代的过程，主要步骤如下：</p>
<ol>
<li>明确问题 ：定义目标和需求。</li>
<li>数据收集 ：获取相关数据。</li>
<li>数据清洗 ：处理缺失值、异常值等问题。</li>
<li>数据探索 ：理解数据特性。</li>
<li>特征工程 ：提取和优化特征。</li>
<li>模型选择与训练 ：构建和训练模型。</li>
<li>模型评估 ：验证模型性能。</li>
<li>结果解释与可视化 ：呈现分析结果。</li>
<li>部署与监控 ：应用到实际场景。</li>
<li>反馈与迭代 ：持续改进。</li>
</ol>
<h2 id="基本库"><a href="#基本库" class="headerlink" title="基本库"></a>基本库</h2><h3 id="最基础的库"><a href="#最基础的库" class="headerlink" title="最基础的库"></a>最基础的库</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br></pre></td></tr></table></figure></div>

<h3 id="画图库"><a href="#画图库" class="headerlink" title="画图库"></a>画图库</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div>

<h3 id="机器学习库"><a href="#机器学习库" class="headerlink" title="机器学习库"></a>机器学习库</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.ensemble import RandomForestRegressor</span><br><span class="line">from sklearn.metrics import mean_squared_error,r2_score</span><br></pre></td></tr></table></figure></div>
<p>sklearn库有很多 需要什么就import什么<br>不要直接import整个库</p>
<h2 id="浏览数据"><a href="#浏览数据" class="headerlink" title="浏览数据"></a>浏览数据</h2><h3 id="阅读数据"><a href="#阅读数据" class="headerlink" title="阅读数据"></a>阅读数据</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)  <span class="comment">#打开data.csv文件</span></span><br><span class="line">data.head   <span class="comment">#浏览前5行</span></span><br></pre></td></tr></table></figure></div>

<h3 id="查看数据信息"><a href="#查看数据信息" class="headerlink" title="查看数据信息"></a>查看数据信息</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">diabetes.describe() <span class="comment">#查看数据的统计信息 如最大值 最小值 均值等</span></span><br><span class="line">diabetes.info() <span class="comment">#查看数据信息 如字段名 字段类型</span></span><br></pre></td></tr></table></figure></div>

<h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h3><div class="tabs" id="tab-001"><ul class="nav-tabs"><li class="tab active"><a class="#001-1">删除含有缺失值的行</a></li><li class="tab"><a class="#001-2">使用均值填充缺失值</a></li><li class="tab"><a class="#001-3">使用众数填充缺失值</a></li><li class="tab"><a class="#001-4">使用分位数填充缺失值</a></li></ul><div class="tab-content"><div class="tab-pane active" id="001-1"><p><strong>删除含有缺失值的行</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">data_cleaned = df.dropna()</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="001-2"><p><strong>使用均值填充缺失值</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df_filled = df.fillna(df.mean())</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="001-3"><p><strong>使用众数填充缺失值</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = &#123;<span class="string">&#x27;A&#x27;</span>: [1, 2, 2, None, 4, 2], <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, None, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到每列的众数</span></span><br><span class="line">mode_A = <span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>].mode()[0]  <span class="comment"># 数值型列</span></span><br><span class="line">mode_B = <span class="built_in">df</span>[<span class="string">&#x27;B&#x27;</span>].mode()[0]  <span class="comment"># 类别型列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用众数填充缺失值</span></span><br><span class="line">df_filled_mode = df.fillna(&#123;<span class="string">&#x27;A&#x27;</span>: mode_A, <span class="string">&#x27;B&#x27;</span>: mode_B&#125;)</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="001-4"><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = &#123;<span class="string">&#x27;C&#x27;</span>: [1, 2, 3, None, 5, 6, None]&#125;</span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算指定分位数</span></span><br><span class="line">quantile_25 = <span class="built_in">df</span>[<span class="string">&#x27;C&#x27;</span>].quantile(0.25)  <span class="comment"># 第一四分位数 (25%)</span></span><br><span class="line">quantile_50 = <span class="built_in">df</span>[<span class="string">&#x27;C&#x27;</span>].quantile(0.50)  <span class="comment"># 中位数 (50%)</span></span><br><span class="line">quantile_75 = <span class="built_in">df</span>[<span class="string">&#x27;C&#x27;</span>].quantile(0.75)  <span class="comment"># 第三四分位数 (75%)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用分位数填充缺失值</span></span><br><span class="line">df_filled_quantile_25 = df.fillna(&#123;<span class="string">&#x27;C&#x27;</span>: quantile_25&#125;)</span><br><span class="line">df_filled_quantile_50 = df.fillna(&#123;<span class="string">&#x27;C&#x27;</span>: quantile_50&#125;)</span><br><span class="line">df_filled_quantile_75 = df.fillna(&#123;<span class="string">&#x27;C&#x27;</span>: quantile_75&#125;)</span><br></pre></td></tr></table></figure></div></div></div></div>


<h3 id="处理异常值"><a href="#处理异常值" class="headerlink" title="处理异常值"></a>处理异常值</h3><h4 id="异常值检测"><a href="#异常值检测" class="headerlink" title="异常值检测"></a>异常值检测</h4><div class="tabs" id="tab-异常值检测"><ul class="nav-tabs"><li class="tab active"><a class="#异常值检测-1">使用 Z-Score 检测</a></li><li class="tab"><a class="#异常值检测-2">使用 IQR 方法检测</a></li><li class="tab"><a class="#异常值检测-3">使用可视化方法检测</a></li></ul><div class="tab-content"><div class="tab-pane active" id="异常值检测-1"><p><strong>使用 Z-Score 检测</strong></p>
<p> Z-Score 衡量某个值距离均值的标准差数量。通常，绝对 Z-Score 大于 3 的值被认为是异常值。<br> <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = &#123;<span class="string">&#x27;A&#x27;</span>: [1, 2, 3, 4, 5, 100]&#125;</span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 Z-Score</span></span><br><span class="line">mean = <span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>].mean()</span><br><span class="line">std = <span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>].std()</span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;Z-Score&#x27;</span>] = (<span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>] - mean) / std</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测异常值（Z-Score &gt; 3 或 &lt; -3）</span></span><br><span class="line">outliers = <span class="built_in">df</span>[abs(<span class="built_in">df</span>[<span class="string">&#x27;Z-Score&#x27;</span>]) &gt; 3]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;异常值：\n&quot;</span>, outliers)</span><br></pre></td></tr></table></figure></div></p></div><div class="tab-pane" id="异常值检测-2"><p><strong>使用 IQR 方法检测</strong></p>
<p>IQR（四分位距）是第三四分位数（Q3）与第一四分位数（Q1）的差值。通常，低于 Q1−1.5×IQR 或高于 Q3+1.5×IQR 的值被认为是异常值。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = &#123;<span class="string">&#x27;A&#x27;</span>: [1, 2, 3, 4, 5, 100]&#125;</span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 IQR</span></span><br><span class="line">Q1 = <span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>].quantile(0.25)</span><br><span class="line">Q3 = <span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>].quantile(0.75)</span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义上下界</span></span><br><span class="line">lower_bound = Q1 - 1.5 * IQR</span><br><span class="line">upper_bound = Q3 + 1.5 * IQR</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测异常值</span></span><br><span class="line">outliers = <span class="built_in">df</span>[(<span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>] &lt; lower_bound) | (<span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>] &gt; upper_bound)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;异常值：\n&quot;</span>, outliers)</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="异常值检测-3"><p><strong>This is Tab 3.</strong></p>
<p>箱线图（Box Plot）是一种直观的异常值检测工具。<br>箱线图中的点位于箱子外部的上界或下界之外，这些点即为异常值。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制箱线图</span></span><br><span class="line">plt.boxplot(<span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Box Plot of Data&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h4><div class="tabs" id="tab-异常值处理方法"><ul class="nav-tabs"><li class="tab active"><a class="#异常值处理方法-1">删除异常值</a></li><li class="tab"><a class="#异常值处理方法-2">替换异常值</a></li><li class="tab"><a class="#异常值处理方法-3">胜率变换</a></li></ul><div class="tab-content"><div class="tab-pane active" id="异常值处理方法-1"><p><strong>删除异常值</strong><br>直接从数据集中移除异常值。<br> <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 删除基于 IQR 方法检测到的异常值</span></span><br><span class="line">filtered_df = <span class="built_in">df</span>[(<span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>] &gt;= lower_bound) &amp; (<span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>] &lt;= upper_bound)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除异常值后的数据：\n&quot;</span>, filtered_df)</span><br></pre></td></tr></table></figure></div></p></div><div class="tab-pane" id="异常值处理方法-2"><p><strong>替换异常值</strong></p>
<p>将异常值替换为合理的值，例如均值、中位数或边界值。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将异常值替换为中位数</span></span><br><span class="line">median = <span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>].median()</span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>] = np.where((df[&#x27;A&#x27;] &lt; lower_bound) | (df[&#x27;A&#x27;] &gt; upper_bound), median, df[&#x27;A&#x27;])</span><br><span class="line"></span><br><span class="line">print(&quot;替换异常值后的数据：\n&quot;, df)</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="异常值处理方法-3"><p><strong>胜率变换</strong></p>
<p>将异常值限制在一定范围内，而不是完全删除或替换。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from scipy.stats import mstats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 胜率变换：将异常值限制在 5% 和 95% 分位数之间</span></span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;A_winsorized&#x27;</span>] = mstats.winsorize(<span class="built_in">df</span>[<span class="string">&#x27;A&#x27;</span>], limits=[0.05, 0.05])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;胜率变换后的数据：\n&quot;</span>, <span class="built_in">df</span>)</span><br></pre></td></tr></table></figure></div></div></div></div>

<h3 id="数据标准化与归一化"><a href="#数据标准化与归一化" class="headerlink" title="数据标准化与归一化"></a>数据标准化与归一化</h3><h4 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h4><p>将数据转换为零均值（Mean &#x3D; 0）和单位方差（Variance &#x3D; 1）</p>
<ul>
<li>适用于数据分布接近正态分布的情况 ：标准化假设数据服从正态分布，因此在数据分布大致对称时效果更好。</li>
<li>适用于对距离敏感的算法 ：例如 K-Means、KNN、SVM 和神经网络等。这些算法对特征的尺度非常敏感，标准化可以确保每个特征对结果的贡献是均衡的。</li>
<li>适用于梯度下降优化的模型 ：如线性回归、逻辑回归等。标准化可以使梯度下降更快收敛。</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import StandardScaler, MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = [[1, 2], [3, 4], [5, 6]]</span><br><span class="line">X = pd.DataFrame(data, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_standardized = scaler.fit_transform(X)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标准化后的数据：\n&quot;</span>, X_standardized)</span><br></pre></td></tr></table></figure></div>

<h4 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h4><p>将数据缩放到指定范围（通常是 [0, 1] 或 [-1, 1]）</p>
<ul>
<li>适用于数据分布未知或非正态分布的情况 ：归一化不要求数据服从正态分布，因此适用于分布不规则的数据。</li>
<li>适用于最大值和最小值明确的场景 ：例如图像像素值通常在 [0, 255] 范围内，归一化可以将其缩放到 [0, 1]。</li>
<li>适用于距离计算或相似性度量的算法 ：例如余弦相似度、基于距离的聚类算法等。归一化可以避免大值特征主导结果。</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import StandardScaler, MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = [[1, 2], [3, 4], [5, 6]]</span><br><span class="line">X = pd.DataFrame(data, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">minmax_scaler = MinMaxScaler()</span><br><span class="line">X_normalized = minmax_scaler.fit_transform(X)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;归一化后的数据：\n&quot;</span>, X_normalized)</span><br></pre></td></tr></table></figure></div>

<h3 id="特征编码"><a href="#特征编码" class="headerlink" title="特征编码"></a>特征编码</h3><p>特征编码（Feature Encoding）是将非数值型特征（如类别型、文本型数据）转换为数值型表示的过程。它是机器学习中数据预处理的重要步骤，因为大多数机器学习算法只能处理数值型数据。</p>
<div class="tabs" id="tab-常见的特征编码方法"><ul class="nav-tabs"><li class="tab active"><a class="#常见的特征编码方法-1">标签编码</a></li><li class="tab"><a class="#常见的特征编码方法-2">独热编码</a></li><li class="tab"><a class="#常见的特征编码方法-3">目标编码</a></li></ul><div class="tab-content"><div class="tab-pane active" id="常见的特征编码方法-1"><p>将类别型变量映射为整数（如 “red” → 0, “blue” → 1, “green” → 2）。<br>适用场景 ：类别之间具有顺序关系（如 “low”, “medium”, “high”）。<br>优点 ：简单高效，适用于少量类别的情况。<br>缺点 ：可能导致模型误以为类别之间有数值上的大小关系。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import LabelEncoder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">le = LabelEncoder()</span><br><span class="line">encoded_data = le.fit_transform(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标签编码结果：&quot;</span>, encoded_data)</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="常见的特征编码方法-2"><p>将每个类别值转换为一个二进制向量。<br>适用场景 ：类别之间没有顺序关系（如 “red”, “blue”, “green”）。<br>优点 ：消除了类别间的数值关系，适合无序类别。<br>缺点 ：可能会导致维度爆炸（类别数量过多时生成的特征维度过大）。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import OneHotEncoder</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">ohe = OneHotEncoder(sparse=False)</span><br><span class="line">encoded_data = ohe.fit_transform(pd.DataFrame(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;独热编码结果：\n&quot;</span>, encoded_data)</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="常见的特征编码方法-3"><p>使用目标变量的统计信息（如均值）对类别变量进行编码。<br>适用场景 ：类别数量较多且数据量较大时，避免维度爆炸问题。<br>优点 ：保留了类别与目标变量的关系。<br>缺点 ：可能导致过拟合，需注意平滑处理。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = &#123;<span class="string">&#x27;category&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], <span class="string">&#x27;target&#x27;</span>: [1, 0, 1, 1, 0]&#125;</span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个类别的目标均值</span></span><br><span class="line">target_mean = df.groupby(<span class="string">&#x27;category&#x27;</span>)[<span class="string">&#x27;target&#x27;</span>].mean()</span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;target_encoded&#x27;</span>] = <span class="built_in">df</span>[<span class="string">&#x27;category&#x27;</span>].map(target_mean)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;目标编码结果：\n&quot;</span>, <span class="built_in">df</span>)</span><br></pre></td></tr></table></figure></div></div></div></div>

<h3 id="特征选择与降维"><a href="#特征选择与降维" class="headerlink" title="特征选择与降维"></a>特征选择与降维</h3><h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><p>特征选择是从原始特征集中选择最重要的子集，从而减少无关或冗余特征对模型的影响。</p>
<p>减少过拟合 ：通过去除无关特征，降低模型复杂度。<br>提高训练效率 ：减少特征数量可以加速模型训练。<br>增强可解释性 ：保留关键特征有助于理解模型的工作机制。</p>
<p>根据特征选择的方式，可分为以下三类：</p>
<div class="tabs" id="tab-特征选择"><ul class="nav-tabs"><li class="tab active"><a class="#特征选择-1">过滤法</a></li><li class="tab"><a class="#特征选择-2">包装法</a></li><li class="tab"><a class="#特征选择-3">嵌入法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="特征选择-1"><p>根据统计指标（如相关性、互信息等）独立评估每个特征的重要性。<br>不依赖于具体模型。<br>优点 ：计算简单，速度快。<br>缺点 ：可能忽略特征之间的交互关系。</p>
<blockquote>
<p>示例 ：<br>相关系数（Pearson、Spearman）<br>卡方检验<br>互信息</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.feature_selection import SelectKBest, chi2</span><br><span class="line">from sklearn.datasets import load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用卡方检验选择前 2 个最佳特征</span></span><br><span class="line">selector = SelectKBest(chi2, k=2)</span><br><span class="line">X_new = selector.fit_transform(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;选择后的特征形状：&quot;</span>, X_new.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;每个特征的得分：&quot;</span>, selector.scores_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否被选择：&quot;</span>, selector.get_support())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个特征的得分</span></span><br><span class="line">scores = pd.Series(selector.scores_, index=X.columns)</span><br><span class="line">scores = scores.sort_values(ascending=False)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方检验得分最高的特征：\n&quot;</span>, scores.head(10))</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="特征选择-2"><p>通过反复训练模型来评估特征子集的表现。<br>常用算法：递归特征消除（RFE）。<br>优点 ：考虑特征之间的交互关系。<br>缺点 ：计算成本高。</p>
<blockquote>
<p>示例 ：<br>RFE（Recursive Feature Elimination）</p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> from sklearn.feature_selection import RFE</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line">model = LogisticRegression()</span><br><span class="line">rfe = RFE(model, n_features_to_select=2)</span><br><span class="line">X_new = rfe.fit_transform(X, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;选择后的特征形状：&quot;</span>, X_new.shape)</span><br></pre></td></tr></table></figure></div></blockquote></div><div class="tab-pane" id="特征选择-3"><p>在模型训练过程中自动选择重要特征。<br>常用算法：Lasso 回归、树模型（如随机森林、XGBoost）。<br>优点 ：结合了模型训练和特征选择。<br>缺点 ：依赖于具体模型。</p>
<blockquote>
<p>示例 ：<br>Lasso 回归（基于 L1 正则化） </p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.linear_model import Lasso</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Lasso 回归进行特征选择</span></span><br><span class="line">lasso = Lasso(alpha=0.1)</span><br><span class="line">lasso.fit(X, y)</span><br><span class="line">selected_features = [i <span class="keyword">for</span> i, coef <span class="keyword">in</span> enumerate(lasso.coef_) <span class="keyword">if</span> coef != 0]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;选择的特征索引：&quot;</span>, selected_features)</span><br></pre></td></tr></table></figure></div></div></div></div>
<h4 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h4><p>将数据投影到方差最大的方向上。<br>优点 ：线性变换，计算高效。<br>缺点 ：仅适用于线性可分的数据。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.decomposition import PCA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 PCA 降维到 2 维</span></span><br><span class="line">pca = PCA(n_components=2)</span><br><span class="line">X_pca = pca.fit_transform(X_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;降维后的数据形状：&quot;</span>, X_pca.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个主成分的贡献率</span></span><br><span class="line">explained_variance = pd.Series(pca.explained_variance_ratio_, index=[f<span class="string">&#x27;PC&#123;i+1&#125;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(2)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;主成分贡献率：\n&quot;</span>, explained_variance)</span><br></pre></td></tr></table></figure></div>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="相关性分析"><a href="#相关性分析" class="headerlink" title="相关性分析"></a>相关性分析</h3><p>相关性矩阵</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]  <span class="comment">#填入要进行分析的结果列 通常为最后一列</span></span><br><span class="line">X = diabetes.drop([<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;others&#x27;</span>], axis=1) <span class="comment">#去除结果列和字符列（如果有）</span></span><br><span class="line"><span class="comment">#通常string类型的列（离散的特性）进行调整成int类型（连续化）即离散特征连续化</span></span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line">correlation_matrix = pd.concat([X_train, y_train], axis=1).corr()</span><br><span class="line"></span><br><span class="line">sns.heatmap(correlation_matrix, annot=True, cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p>matlab库</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = data[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">y = data[<span class="string">&quot;y&quot;</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<h2 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a>数据划分</h2><h3 id="分离特征和目标变量"><a href="#分离特征和目标变量" class="headerlink" title="分离特征和目标变量"></a>分离特征和目标变量</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设 &#x27;target&#x27; 是目标变量列名</span></span><br><span class="line">X = data.drop(columns=[<span class="string">&#x27;target&#x27;</span>])  <span class="comment"># 特征</span></span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]  <span class="comment"># 目标变量</span></span><br></pre></td></tr></table></figure></div>
<h3 id="数据划分-1"><a href="#数据划分-1" class="headerlink" title="数据划分"></a>数据划分</h3><p>将数据划分为训练集和测试集</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集大小：&quot;</span>, X_train.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试集大小：&quot;</span>, X_test.shape)</span><br></pre></td></tr></table></figure></div>

<h2 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h2><h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><p>准确率是指模型预测正确的样本占总样本的比例。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">y_true = [0, 1, 1, 0, 1]</span><br><span class="line">y_pred = [0, 1, 0, 0, 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">accuracy = accuracy_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;准确率：&quot;</span>, accuracy)</span><br></pre></td></tr></table></figure></div>
<h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><p>混淆矩阵是一个表格，用于总结分类模型的预测结果。</p>
<blockquote>
<p>常见术语：<br>TP（True Positive）：正类正确预测为正类。<br>TN（True Negative）：负类正确预测为负类。<br>FP（False Positive）：负类错误预测为正类。<br>FN（False Negative）：正类错误预测为负类。</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import confusion_matrix</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">y_true = [0, 1, 1, 0, 1]</span><br><span class="line">y_pred = [0, 1, 0, 0, 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算混淆矩阵</span></span><br><span class="line">cm = confusion_matrix(y_true, y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化混淆矩阵</span></span><br><span class="line">sns.heatmap(cm, annot=True, <span class="built_in">fmt</span>=<span class="string">&#x27;d&#x27;</span>, cmap=<span class="string">&#x27;Blues&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Predicted Labels&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Labels&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Confusion Matrix&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<h3 id="召回率"><a href="#召回率" class="headerlink" title="召回率"></a>召回率</h3><p>召回率（也称灵敏度或 True Positive Rate）是指模型正确预测为正类的样本占实际正类的比例。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import recall_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">y_true = [0, 1, 1, 0, 1]</span><br><span class="line">y_pred = [0, 1, 0, 0, 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算召回率</span></span><br><span class="line">recall = recall_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;召回率：&quot;</span>, recall)</span><br></pre></td></tr></table></figure></div>

<h3 id="精确率"><a href="#精确率" class="headerlink" title="精确率"></a>精确率</h3><p>精确率是指模型预测为正类的样本中实际为正类的比例。</p>
<blockquote>
<p>适用场景<br>关注减少误报时使用（如推荐系统）。</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import precision_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">y_true = [0, 1, 1, 0, 1]</span><br><span class="line">y_pred = [0, 1, 0, 0, 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算精确率</span></span><br><span class="line">precision = precision_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;精确率：&quot;</span>, precision)</span><br></pre></td></tr></table></figure></div>

<h3 id="F1-分数"><a href="#F1-分数" class="headerlink" title="F1 分数"></a>F1 分数</h3><p>F1 分数是精确率和召回率的调和平均值，用于综合衡量模型性能。</p>
<blockquote>
<p>适用场景<br>类别不平衡时使用。</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import f1_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">y_true = [0, 1, 1, 0, 1]</span><br><span class="line">y_pred = [0, 1, 0, 0, 1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 F1 分数</span></span><br><span class="line">f1 = f1_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F1 分数：&quot;</span>, f1)</span><br></pre></td></tr></table></figure></div>

<h3 id="AUC"><a href="#AUC" class="headerlink" title="AUC"></a>AUC</h3><p>AUC 是 ROC 曲线下的面积，用于衡量模型区分正负类的能力。<br>范围：[0, 1]，值越大表示模型性能越好。</p>
<blockquote>
<p>适用场景<br>需要评估模型整体性能时使用。</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import roc_auc_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">y_true = [0, 1, 1, 0, 1]</span><br><span class="line">y_scores = [0.1, 0.9, 0.8, 0.2, 0.7]  <span class="comment"># 模型预测的概率值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 AUC</span></span><br><span class="line">auc = roc_auc_score(y_true, y_scores)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;AUC：&quot;</span>, auc)</span><br></pre></td></tr></table></figure></div>

<h3 id="均方误差-均方根误差-R²-决定系数"><a href="#均方误差-均方根误差-R²-决定系数" class="headerlink" title="均方误差 均方根误差 R² 决定系数"></a>均方误差 均方根误差 R² 决定系数</h3><p>均方误差是预测值与真实值之间差值平方的平均值。</p>
<p>均方根误差是均方误差的平方根，用于将误差恢复到原始单位。</p>
<p>R² 决定系数衡量模型对数据的拟合程度，取值范围为 (−∞,1]。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">y_true = [3.0, -0.5, 2.0, 7.0]  <span class="comment"># 真实值</span></span><br><span class="line">y_pred = [2.5, 0.0, 2.0, 8.0]  <span class="comment"># 预测值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 MSE</span></span><br><span class="line">mse = mean_squared_error(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;均方误差（MSE）：&quot;</span>, mse)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 RMSE</span></span><br><span class="line">rmse = np.sqrt(mse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;均方根误差（RMSE）：&quot;</span>, rmse)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 MAE</span></span><br><span class="line">mae = mean_absolute_error(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均绝对误差（MAE）：&quot;</span>, mae)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 R²</span></span><br><span class="line">r2 = r2_score(y_true, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;R² 决定系数：&quot;</span>, r2)</span><br></pre></td></tr></table></figure></div>

<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sns</span><br><span class="line">from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV</span><br><span class="line">from sklearn.linear_model import LinearRegression, Ridge, Lasso</span><br><span class="line">from sklearn.preprocessing import StandardScaler, OneHotEncoder</span><br><span class="line">from sklearn.compose import ColumnTransformer</span><br><span class="line">from sklearn.pipeline import Pipeline</span><br><span class="line">from sklearn.metrics import mean_squared_error, r2_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设 data 是一个 Pandas DataFrame</span></span><br><span class="line"><span class="comment"># data = pd.read_csv(&#x27;data.csv&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line">X = data.drop(columns=[<span class="string">&#x27;target&#x27;</span>])</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line">numeric_features = X.select_dtypes(include=[<span class="string">&#x27;int64&#x27;</span>, <span class="string">&#x27;float64&#x27;</span>]).columns</span><br><span class="line">categorical_features = X.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;category&#x27;</span>]).columns</span><br><span class="line"></span><br><span class="line">preprocessor = ColumnTransformer(</span><br><span class="line">    transformers=[</span><br><span class="line">        (<span class="string">&#x27;num&#x27;</span>, StandardScaler(), numeric_features),</span><br><span class="line">        (<span class="string">&#x27;cat&#x27;</span>, OneHotEncoder(), categorical_features)</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line">plt.figure(figsize=(8, 5))</span><br><span class="line">sns.histplot(y, kde=True, bins=30, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Target Variable Distribution&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型选择</span></span><br><span class="line">models = &#123;</span><br><span class="line">    <span class="string">&quot;Linear Regression&quot;</span>: Pipeline(steps=[(<span class="string">&#x27;preprocessor&#x27;</span>, preprocessor), (<span class="string">&#x27;regressor&#x27;</span>, LinearRegression())]),</span><br><span class="line">    <span class="string">&quot;Ridge Regression&quot;</span>: Pipeline(steps=[(<span class="string">&#x27;preprocessor&#x27;</span>, preprocessor), (<span class="string">&#x27;regressor&#x27;</span>, Ridge())]),</span><br><span class="line">    <span class="string">&quot;Lasso Regression&quot;</span>: Pipeline(steps=[(<span class="string">&#x27;preprocessor&#x27;</span>, preprocessor), (<span class="string">&#x27;regressor&#x27;</span>, Lasso())])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">param_grid = &#123;<span class="string">&#x27;regressor__alpha&#x27;</span>: [0.01, 0.1, 1, 10, 100]&#125;</span><br><span class="line"><span class="keyword">for</span> model_name, model <span class="keyword">in</span> list(models.items())[1:]:</span><br><span class="line">    grid_search = GridSearchCV(model, param_grid, cv=5, scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>)</span><br><span class="line">    grid_search.fit(X_train, y_train)</span><br><span class="line">    models[model_name] = grid_search.best_estimator_</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;&#123;model_name&#125; 最佳参数：&quot;</span>, grid_search.best_params_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型验证</span></span><br><span class="line">results = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> model_name, model <span class="keyword">in</span> models.items():</span><br><span class="line">    scores = cross_val_score(model, X_train, y_train, cv=5, scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>)</span><br><span class="line">    results[model_name] = -scores.mean()</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;&#123;model_name&#125; 的平均 MSE：&quot;</span>, results[model_name])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集评估</span></span><br><span class="line">best_model_name = min(results, key=results.get)</span><br><span class="line">best_model = models[best_model_name]</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;最佳模型：&#123;best_model_name&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">best_model.fit(X_train, y_train)</span><br><span class="line">y_pred = best_model.predict(X_test)</span><br><span class="line"></span><br><span class="line">mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">r2 = r2_score(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;测试集 MSE：&#123;mse&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;测试集 R²：&#123;r2&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">plt.figure(figsize=(8, 6))</span><br><span class="line">plt.scatter(y_test, y_pred, alpha=0.7, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.plot([y.min(), y.max()], [y.min(), y.max()], <span class="string">&#x27;r--&#x27;</span>, lw=2)</span><br><span class="line">plt.title(<span class="string">&#x27;True vs Predicted Values&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">residuals = y_test - y_pred</span><br><span class="line">plt.figure(figsize=(8, 6))</span><br><span class="line">sns.histplot(residuals, kde=True, bins=30, color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Residuals Distribution&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>使数组元素互不相同所需的最少操作次数</title>
    <url>/zhihaojiang.github.io/2025/04/08/20250408%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E4%BA%92%E4%B8%8D%E7%9B%B8%E5%90%8C%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums，你需要确保数组中的元素 互不相同 。为此，你可以执行以下操作任意次：</p>
<p>从数组的开头移除 3 个元素。如果数组中元素少于 3 个，则移除所有剩余元素。<br>注意：空数组也视作为数组元素互不相同。返回使数组元素互不相同所需的 最少操作次数 。</p>
<blockquote>
<p>示例 1：</p>
<p>输入： nums &#x3D; [1,2,3,4,2,3,3,5,7]</p>
<p>输出： 2</p>
<p>解释：</p>
<p>第一次操作：移除前 3 个元素，数组变为 [4, 2, 3, 3, 5, 7]。<br>第二次操作：再次移除前 3 个元素，数组变为 [3, 5, 7]，此时数组中的元素互不相同。<br>因此，答案是 2。</p>
<p>示例 2：</p>
<p>输入： nums &#x3D; [4,5,6,4,4]</p>
<p>输出： 2</p>
<p>解释：</p>
<p>第一次操作：移除前 3 个元素，数组变为 [4, 4]。<br>第二次操作：移除所有剩余元素，数组变为空。<br>因此，答案是 2。</p>
<p>示例 3：</p>
<p>输入： nums &#x3D; [6,7,8,9]</p>
<p>输出： 0</p>
<p>解释：</p>
<p>数组中的元素已经互不相同，因此不需要进行任何操作，答案是 0。</p>
</blockquote>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>采用倒序判断 arr为一个布尔数组 用于判断数字是否重复出现 是O(n)的时间复杂度</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def minimumOperations(self, nums):</span><br><span class="line">        n = len(nums)</span><br><span class="line">        arr = [False] * 128</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - 1,-1 , -1):</span><br><span class="line">            <span class="keyword">if</span> arr[nums[i]]:</span><br><span class="line">                <span class="built_in">return</span> i // 3 + 1</span><br><span class="line">            arr[nums[i]] = True</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>使数组的值全部为 K 的最少操作次数</title>
    <url>/zhihaojiang.github.io/2025/04/09/20250409%E4%BD%BF%E6%95%B0%E7%BB%84%E7%9A%84%E5%80%BC%E5%85%A8%E9%83%A8%E4%B8%BA%20K%20%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums 和一个整数 k 。</p>
<p>如果一个数组中所有 严格大于 h 的整数值都 相等 ，那么我们称整数 h 是 合法的 。</p>
<p>比方说，如果 nums &#x3D; [10, 8, 10, 8] ，那么 h &#x3D; 9 是一个 合法 整数，因为所有满足 nums[i] &gt; 9 的数都等于 10 ，但是 5 不是 合法 整数。</p>
<p>你可以对 nums 执行以下操作：</p>
<p>选择一个整数 h ，它对于 当前 nums 中的值是合法的。<br>对于每个下标 i ，如果它满足 nums[i] &gt; h ，那么将 nums[i] 变为 h 。<br>你的目标是将 nums 中的所有元素都变为 k ，请你返回 最少 操作次数。如果无法将所有元素都变 k ，那么返回 -1 。</p>
<blockquote>
<p>示例 1：</p>
<p>输入：nums &#x3D; [5,2,5,4,5], k &#x3D; 2</p>
<p>输出：2</p>
<p>解释：</p>
<p>依次选择合法整数 4 和 2 ，将数组全部变为 2 。</p>
<p>示例 2：</p>
<p>输入：nums &#x3D; [2,1,2], k &#x3D; 2</p>
<p>输出：-1</p>
<p>解释：</p>
<p>没法将所有值变为 2 。</p>
<p>示例 3：</p>
<p>输入：nums &#x3D; [9,7,5,3], k &#x3D; 1</p>
<p>输出：4</p>
<p>解释：</p>
<p>依次选择合法整数 7 ，5 ，3 和 1 ，将数组全部变为 1 。</p>
</blockquote>
<h2 id="解释题目"><a href="#解释题目" class="headerlink" title="解释题目"></a>解释题目</h2><p>异常情况: nums[i]&lt;k, 直接返回 −1<br>需要进行转换的元素: nums[i]&gt;k<br>无需转换的元素: nums[i]&#x3D;&#x3D;k</p>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def minOperations(self, nums, k):</span><br><span class="line">        n = len(nums)</span><br><span class="line">        s = <span class="built_in">set</span>([])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt; k:</span><br><span class="line">                <span class="built_in">return</span> -1</span><br><span class="line">            <span class="keyword">if</span> nums[i] != k:</span><br><span class="line">                s.add(nums[i])</span><br><span class="line">        <span class="built_in">return</span> len(s)</span><br></pre></td></tr></table></figure></div>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>set()</strong><br>set顾名思义是集合 里面不能包含重复的元素 接收一个list作为参数<br>set() 函数创建一个无序不重复元素集 可进行关系测试 删除重复数据 还可以计算交集、差集、并集等</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">list = [2,3,5,7]</span><br><span class="line">s = <span class="built_in">set</span>(list)</span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment">#输出set([2,3,5,7])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">s.add(9)</span><br><span class="line">s.add(7)</span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment">#输出set([2,3,5,7,9])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">s.remove(9)</span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment">#输出set([2,3,5,7])</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>向字符串添加空格</title>
    <url>/zhihaojiang.github.io/2025/04/10/20250410%E5%90%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%BB%E5%8A%A0%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个下标从 0 开始的字符串 s ，以及一个下标从 0 开始的整数数组 spaces 。</p>
<p>数组 spaces 描述原字符串中需要添加空格的下标。每个空格都应该插入到给定索引处的字符值 之前 。</p>
<p>例如，s &#x3D; “EnjoyYourCoffee” 且 spaces &#x3D; [5, 9] ，那么我们需要在 ‘Y’ 和 ‘C’ 之前添加空格，这两个字符分别位于下标 5 和下标 9 。因此，最终得到 “Enjoy Your Coffee” 。<br>请你添加空格，并返回修改后的字符串。</p>
<blockquote>
<p>示例 1：</p>
<p>输入：s &#x3D; “LeetcodeHelpsMeLearn”, spaces &#x3D; [8,13,15]<br>输出：”Leetcode Helps Me Learn”<br>解释：<br>下标 8、13 和 15 对应 “LeetcodeHelpsMeLearn” 中加粗斜体字符。<br>接着在这些字符前添加空格。<br>示例 2：</p>
<p>输入：s &#x3D; “icodeinpython”, spaces &#x3D; [1,5,7,9]<br>输出：”i code in py thon”<br>解释：<br>下标 1、5、7 和 9 对应 “icodeinpython” 中加粗斜体字符。<br>接着在这些字符前添加空格。<br>示例 3：</p>
<p>输入：s &#x3D; “spacing”, spaces &#x3D; [0,1,2,3,4,5,6]<br>输出：” s p a c i n g”<br>解释：<br>字符串的第一个字符前可以添加空格。</p>
</blockquote>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def addSpaces(self, s, spaces):</span><br><span class="line">        s = list(s) <span class="comment">#字符串字符串在 Python 中是不可变的 而列表是可变的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> spaces:    <span class="comment">#遍历 spaces 中的每个元素 即i = spaces[i]</span></span><br><span class="line">            s[i] = <span class="string">&#x27; &#x27;</span> + s[i]</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&#x27;&#x27;</span>.<span class="built_in">join</span>(s)   <span class="comment">#将修改后的字符列表重新组合成一个字符串。</span></span><br></pre></td></tr></table></figure></div>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>‘’.join(s)</strong><br>join函数是一个字符串操作函数 这个函数展开来写应该是str.join(item) str表示字符串（字符），item表示一个成员</p>
<blockquote>
<p>例子：<br>‘,’.join(‘abc’)<br>输出：<br>‘a,b,c’</p>
</blockquote>
<p>join里也可以放列表、元组、字典</p>
<blockquote>
<p>例子：<br>‘ ‘.join([a,b,c])<br>输出：<br>a b c</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>统计对称整数的数目</title>
    <url>/zhihaojiang.github.io/2025/04/11/20250411%E7%BB%9F%E8%AE%A1%E5%AF%B9%E7%A7%B0%E6%95%B4%E6%95%B0%E7%9A%84%E6%95%B0%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个正整数 low 和 high 。</p>
<p>对于一个由 2 * n 位数字组成的整数 x ，如果其前 n 位数字之和与后 n 位数字之和相等，则认为这个数字是一个对称整数。</p>
<p>返回在 [low, high] 范围内的 对称整数的数目 。</p>
<blockquote>
<p>示例 1：</p>
<p>输入：low &#x3D; 1, high &#x3D; 100<br>输出：9<br>解释：在 1 到 100 范围内共有 9 个对称整数：11、22、33、44、55、66、77、88 和 99 。<br>示例 2：</p>
<p>输入：low &#x3D; 1200, high &#x3D; 1230<br>输出：4<br>解释：在 1200 到 1230 范围内共有 4 个对称整数：1203、1212、1221 和 1230 。</p>
<p>提示：<br>1 &lt;&#x3D; low &lt;&#x3D; high &lt;&#x3D; 104</p>
</blockquote>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def countSymmetricIntegers(self, low, high):</span><br><span class="line">        count = 0</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(low, high + 1):</span><br><span class="line">            <span class="keyword">if</span> i &gt; 0 and i &lt; 100:</span><br><span class="line">                <span class="keyword">if</span> i % 11 == 0:</span><br><span class="line">                    count += 1</span><br><span class="line">            <span class="keyword">if</span> i &gt; 1000 and i &lt; 10000:</span><br><span class="line">                left = i // 1000 + i // 100 % 10</span><br><span class="line">                right = i // 10 % 10 + i % 10</span><br><span class="line">                <span class="keyword">if</span> left == right:</span><br><span class="line">                    count += 1</span><br><span class="line">        <span class="built_in">return</span> count</span><br></pre></td></tr></table></figure></div>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>如何取出4位数中的各个位数</strong><br>以2357为例<br>2 &#x3D; 2357 &#x2F;&#x2F; 1000<br>3 &#x3D; 2357 &#x2F;&#x2F; 100 % 10<br>5 &#x3D; 2357 &#x2F;&#x2F; 10 % 10<br>7 &#x3D; 2357 % 10</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>力扣</tag>
      </tags>
  </entry>
  <entry>
    <title>成人抑郁症数据分析</title>
    <url>/zhihaojiang.github.io/2025/04/14/20250414%E6%88%90%E4%BA%BA%E6%8A%91%E9%83%81%E7%97%87%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p><a class="link"   href="https://www.kaggle.com/datasets/sonawanelalitsunil/adult-depression-lghc-indicator/data" >https://www.kaggle.com/datasets/sonawanelalitsunil/adult-depression-lghc-indicator/data<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="成人抑郁症"><a href="#成人抑郁症" class="headerlink" title="成人抑郁症"></a>成人抑郁症</h2><p>成人抑郁症（LGHC 指标）数据集提供了由地方健康地理比较 (LGHC) 计划跟踪的成人抑郁症患病率的见解。它可作为了解不同人群和地区心理健康趋势的公共卫生资源。</p>
<p>主要特点：<br>健康指标：根据健康调查的自我报告数据，关注被诊断患有抑郁症的成年人的百分比。<br>人口统计和地理：按年龄、性别、种族&#x2F;民族、收入水平和地理位置（州、县或地方区域）细分数据。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>对数据集进行探索性分析，找出数据集中的问题。</li>
<li>对数据进行预处理，包括缺失值处理、异常值处理、数据类型转换等。</li>
<li>对数据进行可视化分析，找出数据中的规律。</li>
<li>对数据进行分析，找出数据中的规律并预测抑郁症的概率。</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>导入库</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.metrics import mean_squared_error,r2_score</span><br></pre></td></tr></table></figure></div>

<p>读取文件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> = pd.read_csv(<span class="string">&#x27;adult-depression-lghc-indicator-24.csv&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>查看文件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/001.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/002.png"
                      alt="photo"
                ></p>
<h3 id="分析每个字段的含义"><a href="#分析每个字段的含义" class="headerlink" title="分析每个字段的含义"></a>分析每个字段的含义</h3><ul>
<li><code>Year</code>：数据收集年份</li>
<li><code>Strata</code>：包含了各种类别</li>
<li><code>Strata Name</code>：不同类别的详细名称</li>
<li><code>Frequency</code>：频率</li>
<li><code>Weighted Frequency</code>：权重频率</li>
<li><code>Percent</code>：患病百分比 – target</li>
<li><code>Lower 95% CL</code>：较低的 95% CL</li>
<li><code>Upper 95% CL</code>：较高的 95% CL</li>
</ul>
<p>针对Strata</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;Strata&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/003.png"
                      alt="photo"
                ></p>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">df</span>[<span class="string">&#x27;Year&#x27;</span>]</span><br><span class="line">y = <span class="built_in">df</span>[<span class="string">&#x27;Percent&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sns.lineplot(x=x, y=y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Percent&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Percent of Adults Depressed Over Time&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/004.png"
                      alt="photo"
                ></p>
<p>可以看到 抑郁症发病率在逐年上升 在2017年达到了最高值</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Strata_features = [<span class="string">&#x27;Income&#x27;</span>, <span class="string">&#x27;Race-Ethnicity&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Education&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> Strata_features:</span><br><span class="line">    sns.barplot(x=<span class="string">&#x27;Strata Name&#x27;</span>, y=<span class="string">&#x27;Percent&#x27;</span>, data=<span class="built_in">df</span>[<span class="built_in">df</span>[<span class="string">&#x27;Strata&#x27;</span>]== feature], hue=<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line">    plt.title(f<span class="string">&#x27;Percent of Adults Depressed by &#123;feature&#125;&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/005.png"
                      alt="photo"
                ></p>
<p>可以看到 收入小于$20，000的人得抑郁症的概率高于其他收入水平</p>
<p>可能的原因：低收入水平的人可能面临经济困难和压力，从而增加了他们对抑郁的感知和应对的难度。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/006.png"
                      alt="photo"
                ></p>
<p>可以看到 亚非裔的人得抑郁症的概率低于其他种族和民族</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/007.png"
                      alt="photo"
                ></p>
<p>可以看到 随着年龄的增长 得抑郁症的概率也在增长 在65岁以上时又减小</p>
<p>可能的原因：随着年龄的增长 人们的生活和工作环境也在不断变化 压力也越来越大 因此也会增加得抑郁症的概率 在65岁以上时 人们已经退休了 没有了生活和工作的压力 因此也会减少得抑郁症的概率<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/008.png"
                      alt="photo"
                ></p>
<p>可以看到 学历对得抑郁症的概率没有明显影响</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/009.png"
                      alt="photo"
                ></p>
<p>可以看到 女性得抑郁症的概率高于男性</p>
<p>男女性得抑郁症的概率都逐年上升 在2017年达到最高</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">plt.scatter(<span class="built_in">df</span>[<span class="string">&#x27;Lower 95% CL&#x27;</span>], <span class="built_in">df</span>[<span class="string">&#x27;Percent&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">plt.scatter(<span class="built_in">df</span>[<span class="string">&#x27;Upper 95% CL&#x27;</span>], <span class="built_in">df</span>[<span class="string">&#x27;Percent&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/010.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/011.png"
                      alt="photo"
                ></p>
<p>上述两张散点图可以看到 Upper 95% CL和 Lower 95% CL 对得抑郁症的影响很大</p>
<p>用相关性矩阵查看特征之间的关系</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">num_df = df.select_dtypes(include=[np.number])</span><br><span class="line">sns.heatmap(num_df.corr(), annot=True, cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Correlation Heatmap&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/14/012.png"
                      alt="photo"
                ></p>
<h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.drop(columns=[<span class="string">&#x27;Strata Name&#x27;</span>, <span class="string">&#x27;Strata&#x27;</span>], inplace=True)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>Year                  0<br>Frequency             0<br>Weighted Frequency    7<br>Percent               0<br>Lower 95% CL          0<br>Upper 95% CL          0<br>dtype: int64</p>
</blockquote>
<p>由于只有7个缺失值 所以直接删除</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.dropna(inplace=True)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算 Z-Score</span></span><br><span class="line">mean = <span class="built_in">df</span>[<span class="string">&#x27;Frequency&#x27;</span>].mean()</span><br><span class="line">std = <span class="built_in">df</span>[<span class="string">&#x27;Frequency&#x27;</span>].std()</span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;Z-Score&#x27;</span>] = (<span class="built_in">df</span>[<span class="string">&#x27;Frequency&#x27;</span>] - mean) / std</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测异常值（Z-Score &gt; 3 或 &lt; -3）</span></span><br><span class="line">outliers = <span class="built_in">df</span>[abs(<span class="built_in">df</span>[<span class="string">&#x27;Z-Score&#x27;</span>]) &gt; 3]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;异常值：\n&quot;</span>, outliers)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>异常值：<br>    Year  Frequency  Weighted Frequency  Percent  Lower 95% CL  Upper 95% CL  <br>2  2012       1359           2163108.0    15.25         14.30         16.20<br>3  2012       1314           1806371.0    14.57         13.67         15.46   </p>
<pre><code>Z-Score  
</code></pre>
<p>2  3.498507<br>3  3.339020</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from scipy.stats import mstats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 胜率变换：将异常值限制在 5% 和 95% 分位数之间</span></span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;Frequency_winsorized&#x27;</span>] = mstats.winsorize(<span class="built_in">df</span>[<span class="string">&#x27;Frequency&#x27;</span>], limits=[0.05, 0.05])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;胜率变换后的数据：\n&quot;</span>, <span class="built_in">df</span>)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>胜率变换后的数据：<br>      Year  Frequency  Weighted Frequency  Percent  Lower 95% CL  Upper 95% CL  <br>1    2012        561           1116664.0     8.12          7.32          8.92<br>2    2012       1359           2163108.0    15.25         14.30         16.20<br>3    2012       1314           1806371.0    14.57         13.67         15.46<br>4    2012         97            222022.0    13.54         10.44         16.65<br>5    2012        412            923174.0     9.98          8.91         11.05<br>..    …        …                 …      …           …           …<br>156  2018        496           1623933.0    17.69         13.72         21.66<br>157  2018        285            749615.0    14.56         10.91         18.21<br>158  2018        301           1052945.0    20.06         15.60         24.52<br>159  2018        432            854201.0    21.44         17.65         25.23<br>160  2018        450            661974.0    15.60         13.42         17.78   </p>
<pre><code>  Z-Score  Frequency_winsorized  
</code></pre>
<p>1    0.670280                   561<br>2    3.498507                  1055<br>3    3.339020                  1055<br>4   -0.974202                    97<br>5    0.142203                   412<br>..        …                   …<br>156  0.439911                   496<br>157 -0.307903                   285<br>158 -0.251197                   301<br>159  0.213086                   432<br>160  0.276880                   450  </p>
<p>[154 rows x 8 columns]</p>
</blockquote>
<p>就是将第2，3行的一场数据进行了胜率变换 其他行数据没有变化</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">X = df.drop(columns=[<span class="string">&#x27;Percent&#x27;</span>, <span class="string">&#x27;Z-Score&#x27;</span>, <span class="string">&#x27;Frequency&#x27;</span>])</span><br><span class="line">y = <span class="built_in">df</span>[<span class="string">&#x27;Percent&#x27;</span>]</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line"><span class="comment">#进行标准化</span></span><br><span class="line">scaler =  StandardScaler()</span><br><span class="line">scaler.fit(X_train, X_test)</span><br><span class="line">X_train_scaled = scaler.transform(X_train)</span><br><span class="line">X_test_scaled = scaler.transform(X_test)</span><br></pre></td></tr></table></figure></div>
<h3 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train_scaled, y_train)</span><br><span class="line">y_pred = lr.predict(X_test_scaled)</span><br></pre></td></tr></table></figure></div>

<h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">r2 = r2_score(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Linear Regression MSE:&quot;</span>, mse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Linear Regression R^2:&quot;</span>, r2)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>Linear Regression MSE: 1.439819098234569e-05<br>Linear Regression R^2: 0.999999015347916</p>
</blockquote>
<p>决定系数为0.99以上 说明模型拟合得很好</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Predict Podcast Listening Time</title>
    <url>/zhihaojiang.github.io/2025/04/16/20250416Predict%20Podcast%20Listening%20Time/</url>
    <content><![CDATA[<h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p><a class="link"   href="https://www.kaggle.com/competitions/playground-series-s5e4/data" >https://www.kaggle.com/competitions/playground-series-s5e4/data<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h2><p>Dataset Description<br>The dataset for this competition (both train and test) was generated from a deep learning model trained on the Podcast Listening Time Prediction dataset. Feature distributions are close to, but not exactly the same, as the original. Feel free to use the original dataset as part of this competition, both to explore differences as well as to see whether incorporating the original in training improves model performance.</p>
<p>Files<br>train.csv - the training dataset; Listening_Time_minutes is the target<br>test.csv - the test dataset; your objective is to predict the Listening_Time_minutes for each row<br>sample_submission.csv - a sample submission file in the correct format.</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>导入库</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.metrics import mean_squared_error,r2_score</span><br></pre></td></tr></table></figure></div>

<h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> = pd.read_csv(<span class="string">&#x27;/kaggle/input/playground-series-s5e4/train.csv&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/001.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/002.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/003.png"
                      alt="photo"
                ></p>
<p>现在分析一下这些字段是什么意思：</p>
<ul>
<li><code>id</code>：播客名称</li>
<li><code>podcast_Name</code>：播客名称</li>
<li><code>Episode_Title</code>：章节标题</li>
<li><code>Episode_Length_minutes</code>：章节时长</li>
<li><code>Genre</code>：播客类别</li>
<li><code>Host_Popularity_percentage</code>：主持人人气百分比</li>
<li><code>Publication_Day</code>：播放日期</li>
<li><code>Publication_Time</code>：播放时间</li>
<li><code>Guest_Popularity_percentage</code>：嘉宾人人气百分比</li>
<li><code>Number_of_Ads</code>：广告数量</li>
<li><code>Episode_Sentiment</code>：剧集氛围</li>
<li><code>Listening_Time_minutes</code>：收听时长 – target</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/004.png"
                      alt="photo"
                ></p>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.histplot(<span class="built_in">df</span>[<span class="string">&#x27;Episode_Length_minutes&#x27;</span>], kde=True, bins=30)</span><br><span class="line">plt.title(<span class="string">&#x27;Episode_Length_minutes&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/005.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.histplot(<span class="built_in">df</span>[<span class="string">&#x27;Guest_Popularity_percentage&#x27;</span>], kde=True, bins=30)</span><br><span class="line">plt.title(<span class="string">&#x27;Guest_Popularity_percentage&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/006.png"
                      alt="photo"
                ></p>
<p>可以看到 这两个字段的分布情况比较均匀 并且他们都是连续数值型数据 利用均值填充</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">missing_features = [<span class="string">&#x27;Episode_Length_minutes&#x27;</span>, <span class="string">&#x27;Guest_Popularity_percentage&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> missing_features:</span><br><span class="line">    <span class="built_in">df</span>[feature].fillna(<span class="built_in">df</span>[feature].mean(), inplace=True)</span><br><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/007.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.dropna(inplace=True)</span><br><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/008.png"
                      alt="photo"
                ><br>接下来我们查看是否存在异常值<br>利用箱线图来查看是否存在异常值</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">features = [<span class="string">&#x27;Episode_Length_minutes&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;Host_Popularity_percentage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Guest_Popularity_percentage&#x27;</span>, <span class="string">&#x27;Number_of_Ads&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Listening_Time_minutes&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">    sns.boxplot(x=<span class="built_in">df</span>[col])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/009.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/010.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/011.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/012.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/013.png"
                      alt="photo"
                ></p>
<h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>从上述图中可以看到 Episode_Length_minutes和Number_of_Ads存在异常值</p>
<p>Host_Popularity_percentage和Guest_Popularity_percentage存在超过100的值</p>
<p>从常理来看 百分比不可能大于100</p>
<p>因此 将Episode_Length_minutes和Number_of_Ads的异常值删除</p>
<p>将Host_Popularity_percentage和Guest_Popularity_percentage的异常值进行胜率变换</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">deleted_features = [<span class="string">&#x27;Episode_Length_minutes&#x27;</span>, <span class="string">&#x27;Number_of_Ads&#x27;</span>]</span><br><span class="line">df_cleaned = df.copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> deleted_features:</span><br><span class="line">    Q1 = df_cleaned[col].quantile(0.25)</span><br><span class="line">    Q3 = df_cleaned[col].quantile(0.75)</span><br><span class="line">    IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">    lower_bound = Q1 - 1.5 * IQR</span><br><span class="line">    upper_bound = Q3 + 1.5 * IQR</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只保留当前列在正常范围内的数据（逐步过滤）</span></span><br><span class="line">    df_cleaned = df_cleaned[(df_cleaned[col] &gt;= lower_bound) &amp; (df_cleaned[col] &lt;= upper_bound)]</span><br></pre></td></tr></table></figure></div>

<p>检查一遍</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">features = [<span class="string">&#x27;Episode_Length_minutes&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;Host_Popularity_percentage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Guest_Popularity_percentage&#x27;</span>, <span class="string">&#x27;Number_of_Ads&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Listening_Time_minutes&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">    sns.boxplot(x=df_cleaned[col])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/014.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/015.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/016.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/017.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/018.png"
                      alt="photo"
                ></p>
<p>接下来 我们对字符数据进行处理</p>
<p>值得被编码的特征有：</p>
<ul>
<li>Genre</li>
<li>Publication_Day</li>
<li>Publication_Time</li>
<li>Episode_Sentiment</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df_cleaned[<span class="string">&#x27;Genre&#x27;</span>].describe()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/16/019.png"
                      alt="photo"
                ></p>
<p>发现他们的类别都较少 使用独热编码</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import OneHotEncoder</span><br><span class="line"></span><br><span class="line">one_hot_features = [<span class="string">&#x27;Genre&#x27;</span>, <span class="string">&#x27;Publication_Day&#x27;</span>, <span class="string">&#x27;Publication_Time&#x27;</span>, <span class="string">&#x27;Episode_Sentiment&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ohe = OneHotEncoder(sparse_output=False, handle_unknown=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">encoded_array = ohe.fit_transform(df_cleaned[one_hot_features])</span><br><span class="line">encoded_cols = ohe.get_feature_names_out(one_hot_features)</span><br><span class="line"></span><br><span class="line">encoded_df = pd.DataFrame(encoded_array, columns=encoded_cols, index=df_cleaned.index)</span><br><span class="line"></span><br><span class="line">df_cleaned_encoded = pd.concat([df_cleaned.drop(columns=one_hot_features), encoded_df], axis=1)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df_cleaned_encoded.drop(columns=[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;Podcast_Name&#x27;</span>, <span class="string">&#x27;Episode_Title&#x27;</span>], inplace=True)</span><br></pre></td></tr></table></figure></div>

<h3 id="模型选择-模型评估"><a href="#模型选择-模型评估" class="headerlink" title="模型选择&amp;模型评估"></a>模型选择&amp;模型评估</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.ensemble import RandomForestRegressor</span><br><span class="line"></span><br><span class="line">X = df_cleaned_encoded.drop(columns=[<span class="string">&#x27;Listening_Time_minutes&#x27;</span>])</span><br><span class="line">y = df_cleaned_encoded[<span class="string">&#x27;Listening_Time_minutes&#x27;</span>]</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line"></span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">X_test_scaled = scaler.transform(X_test)</span><br><span class="line"></span><br><span class="line">rf = RandomForestRegressor(n_estimators=100, random_state=42)</span><br><span class="line">rf.fit(X_train_scaled, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = rf.predict(X_test_scaled)</span><br><span class="line"></span><br><span class="line">mse = mean_squared_error(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Mean Squared Error:&quot;</span>, mse)</span><br><span class="line">r2 = r2_score(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;R^2 Score:&quot;</span>, r2)</span><br></pre></td></tr></table></figure></div>

<p>在我的MacBook AirM2上 该模型用时约4‘47秒</p>
<p>Mean Squared Error: 161.35316711251312</p>
<p>R^2 Score: 0.7801317443922687</p>
<p>未进行特征工程</p>
<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p>chatGPT 4o<br>提问的问题：</p>
<ol>
<li>在数据分析中 如何查看是否存在缺失值</li>
<li>针对缺失值 在什么情况下用均值填充 在什么情况下用众数填充 在什么情况下用中位数填充</li>
<li>如何对缺失值做可视化图表 查看缺失值的分布情况</li>
<li>数据分布比较均匀的 其缺失值如何填充</li>
<li>Mean Squared Error: 161.35316711251312 R^2 Score: 0.7801317443922687 这个分数对于一个有29个维度 使用随机森林训练的数据来说怎么样</li>
<li>做相关性矩阵就是做个sns.heatmap吗</li>
<li>我对object进行独热编码后对相关性矩阵<br>这个图看起来很吃力 我该怎么做</li>
<li>代码优化：</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import OneHotEncoder</span><br><span class="line"></span><br><span class="line">one_hot_features = [<span class="string">&#x27;Genre&#x27;</span>, <span class="string">&#x27;Publication_Day&#x27;</span>, <span class="string">&#x27;Publication_Time&#x27;</span>, <span class="string">&#x27;Episode_Sentiment&#x27;</span>]</span><br><span class="line">ohe = OneHotEncoder(sparse=False)</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> one_hot_features:</span><br><span class="line">    df_cleaned_encoded = ohe.fit_transform(pd.DataFrame(col))</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">Cell In[18], line 4</span><br><span class="line">      1 from sklearn.preprocessing import OneHotEncoder</span><br><span class="line">      3 one_hot_features = [<span class="string">&#x27;Genre&#x27;</span>, <span class="string">&#x27;Publication_Day&#x27;</span>, <span class="string">&#x27;Publication_Time&#x27;</span>, <span class="string">&#x27;Episode_Sentiment&#x27;</span>]</span><br><span class="line">----&gt; 4 ohe = OneHotEncoder(sparse=False)</span><br><span class="line">      5 encoded_parts = []</span><br><span class="line">      6 <span class="keyword">for</span> col <span class="keyword">in</span> one_hot_features:</span><br><span class="line"></span><br><span class="line">TypeError: OneHotEncoder.__init__() got an unexpected keyword argument <span class="string">&#x27;sparse&#x27;</span></span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.feature_selection import SelectKBest, chi2</span><br><span class="line">from sklearn.datasets import load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用卡方检验选择前 2 个最佳特征</span></span><br><span class="line">selector = SelectKBest(chi2, k=2)</span><br><span class="line">X_new = selector.fit_transform(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;选择后的特征形状：&quot;</span>, X_new.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;每个特征的得分：&quot;</span>, selector.scores_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否被选择：&quot;</span>, selector.get_support())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个特征的得分</span></span><br><span class="line">scores = pd.Series(selector.scores_, index=X.columns)</span><br><span class="line">scores = scores.sort_values(ascending=False)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方检验得分最高的特征：\n&quot;</span>, scores.head(20))</span><br><span class="line"></span><br><span class="line">显示报错</span><br><span class="line"></span><br><span class="line">ValueError: Unknown label <span class="built_in">type</span>: (array([48.82398, 72.06621,  0.     , ..., 13.09288, 30.92493, 29.3002 ]),)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.decomposition import PCA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 PCA 降维到 2 维</span></span><br><span class="line">pca = PCA(n_components=9)</span><br><span class="line">X_pca = pca.fit_transform(X_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;降维后的数据形状：&quot;</span>, X_pca.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个主成分的贡献率</span></span><br><span class="line">explained_variance = pd.Series(pca.explained_variance_ratio_, index=[f<span class="string">&#x27;PC&#123;i+1&#125;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(9)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;主成分贡献率：\n&quot;</span>, explained_variance)</span><br><span class="line"></span><br><span class="line">降维后的数据形状： (599991, 9)</span><br><span class="line">主成分贡献率：</span><br><span class="line"> PC1    0.458917</span><br><span class="line">PC2    0.297558</span><br><span class="line">PC3    0.241425</span><br><span class="line">PC4    0.000588</span><br><span class="line">PC5    0.000160</span><br><span class="line">PC6    0.000159</span><br><span class="line">PC7    0.000125</span><br><span class="line">PC8    0.000119</span><br><span class="line">PC9    0.000114</span><br><span class="line"></span><br><span class="line">我想查看到底是哪9个特征</span><br></pre></td></tr></table></figure></div>
<p>我的此项目的kaggle网址：<br><a class="link"   href="https://www.kaggle.com/code/super213/randomforest-r-2-0-78" >https://www.kaggle.com/code/super213/randomforest-r-2-0-78<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Spaceship Titanic</title>
    <url>/zhihaojiang.github.io/2025/04/18/20250418Spaceship%20Titanic/</url>
    <content><![CDATA[<h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p><a class="link"   href="https://www.kaggle.com/competitions/spaceship-titanic/data" >https://www.kaggle.com/competitions/spaceship-titanic/data<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h2><p>欢迎来到2912年，你需要运用数据科学技能来解开一个宇宙之谜。我们收到了来自四光年外的传输信息，情况看起来不太妙。</p>
<p>泰坦尼克号宇宙飞船是一艘星际客轮，于一个月前发射升空。这艘载有近1.3万名乘客的飞船开始了它的首航，将来自我们太阳系的移民运送到三颗围绕邻近恒星运行的、新发现的宜居系外行星。</p>
<p>在绕过半人马座阿尔法星，前往其首个目的地——炙热的巨蟹座E星——的途中，粗心大意的泰坦尼克号宇宙飞船与隐藏在尘埃云中的时空异常相撞。不幸的是，它遭遇了与一千年前同名飞船相似的命运。虽然飞船完好无损，但几乎一半的乘客被传送到了另一个维度！</p>
<p>为了帮助救援队找回失踪的乘客，您需要使用从宇宙飞船受损的计算机系统中恢复的记录来预测哪些乘客是被异常现象运送的。</p>
<p>帮助拯救他们并改变历史！</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>导入库</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/001.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/002.png"
                      alt="photo"
                ></p>
<p>现在我们分析一下各个字段的含义：</p>
<ul>
<li>PassengerId：乘客的ID</li>
<li>HomePlanet：乘客出发的星球 通常是他们永久居住的星球</li>
<li>CryoSleep：指示乘客是否选择在航行期间处于休眠状态 处于休眠状态的乘客将被限制在自己的船舱内</li>
<li>Cabin：乘客所住舱位号。格式为deck&#x2F;num&#x2F;side 其中side可以是P左舷 也可以是S右舷 </li>
<li>Destination：乘客即将登陆的星球</li>
<li>Age：乘客的年龄</li>
<li>VIP：乘客是否已支付航行期间的特殊VIP服务费用</li>
<li>RoomService： 乘客在泰坦尼克号宇宙飞船的众多豪华设施中支付的金额</li>
<li>FoodCourt： 乘客在泰坦尼克号宇宙飞船的众多豪华设施中支付的金额</li>
<li>ShoppingMall： 乘客在泰坦尼克号宇宙飞船的众多豪华设施中支付的金额</li>
<li>Spa： 乘客在泰坦尼克号宇宙飞船的众多豪华设施中支付的金额</li>
<li>VRDeck： 乘客在泰坦尼克号宇宙飞船的众多豪华设施中支付的金额</li>
<li>Name：乘客的名字和姓氏</li>
<li>Transported：乘客是否被传送到了另一个维度。这是目标，也就是你要预测的列</li>
</ul>
<h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><p>我们首先处理缺失值</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/003.png"
                      alt="photo"
                ></p>
<p>针对数值型特征 使用均值填充</p>
<p>针对类别型特征 使用众数填充</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">missing_features = [<span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;RoomService&#x27;</span>, <span class="string">&#x27;FoodCourt&#x27;</span>, <span class="string">&#x27;ShoppingMall&#x27;</span>, <span class="string">&#x27;Spa&#x27;</span>, <span class="string">&#x27;VRDeck&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> missing_features:</span><br><span class="line">    <span class="built_in">df</span>[feature].fillna(<span class="built_in">df</span>[feature].mean(), inplace=True)</span><br><span class="line"></span><br><span class="line">categorical_features = [<span class="string">&#x27;HomePlanet&#x27;</span>, <span class="string">&#x27;CryoSleep&#x27;</span>, <span class="string">&#x27;Cabin&#x27;</span>,<span class="string">&#x27;Destination&#x27;</span>, <span class="string">&#x27;VIP&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> categorical_features:</span><br><span class="line">    <span class="built_in">df</span>[feature].fillna(<span class="built_in">df</span>[feature].mode()[0], inplace=True)</span><br></pre></td></tr></table></figure></div>

<p>我们删除一些不必要的列 例如id和名称</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.drop(columns=[<span class="string">&#x27;PassengerId&#x27;</span>, <span class="string">&#x27;Name&#x27;</span>], inplace=True)</span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/004.png"
                      alt="photo"
                ></p>
<p>其中 我发现Cabin这个特征包含了许多信息 将其分为三列</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span>[[<span class="string">&#x27;Cabin_deck&#x27;</span>, <span class="string">&#x27;Cabin_num&#x27;</span>, <span class="string">&#x27;Cabin_side&#x27;</span>]] = <span class="built_in">df</span>[<span class="string">&#x27;Cabin&#x27;</span>].str.split(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">expand</span>=True)</span><br><span class="line"></span><br><span class="line">df.drop(columns=[<span class="string">&#x27;Cabin&#x27;</span>], inplace=True)</span><br><span class="line"></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/005.png"
                      alt="photo"
                ></p>
<h3 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h3><p>用箱线图可视化查看异常值</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">features = [<span class="string">&#x27;Age&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;RoomService&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;FoodCourt&#x27;</span>, <span class="string">&#x27;ShoppingMall&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Spa&#x27;</span>, <span class="string">&#x27;VRDeck&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">    sns.boxplot(x=<span class="built_in">df</span>[col])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/006.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/007.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/008.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/009.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/010.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/011.png"
                      alt="photo"
                ><br>对异常值进行处理</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">features = [ <span class="string">&#x27;RoomService&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;FoodCourt&#x27;</span>, <span class="string">&#x27;ShoppingMall&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Spa&#x27;</span>, <span class="string">&#x27;VRDeck&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">    <span class="built_in">df</span>[col] = np.log1p(<span class="built_in">df</span>[col])</span><br><span class="line"></span><br><span class="line">    Q1 = <span class="built_in">df</span>[col].quantile(0.25)</span><br><span class="line">    Q3 = <span class="built_in">df</span>[col].quantile(0.75)</span><br><span class="line">    IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">    lower = Q1 - 1.5 * IQR</span><br><span class="line">    upper = Q3 + 1.5 * IQR</span><br><span class="line"></span><br><span class="line">    <span class="built_in">df</span>[col] = <span class="built_in">df</span>[col].clip(lower=lower, upper=upper)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Q1 = <span class="built_in">df</span>[<span class="string">&#x27;Age&#x27;</span>].quantile(0.25)</span><br><span class="line">Q3 = <span class="built_in">df</span>[<span class="string">&#x27;Age&#x27;</span>].quantile(0.75)</span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">lower = Q1 - 1.5 * IQR</span><br><span class="line">upper = Q3 + 1.5 * IQR</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;Age&#x27;</span>] = <span class="built_in">df</span>[<span class="string">&#x27;Age&#x27;</span>].clip(lower=lower, upper=upper)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">features = [<span class="string">&#x27;Age&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;RoomService&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;FoodCourt&#x27;</span>, <span class="string">&#x27;ShoppingMall&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Spa&#x27;</span>, <span class="string">&#x27;VRDeck&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">    sns.boxplot(x=<span class="built_in">df</span>[col])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/012.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/013.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/014.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/015.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/016.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/017.png"
                      alt="photo"
                ></p>
<h3 id="可视化分析"><a href="#可视化分析" class="headerlink" title="可视化分析"></a>可视化分析</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">features = [<span class="string">&#x27;HomePlanet&#x27;</span>, <span class="string">&#x27;CryoSleep&#x27;</span>, <span class="string">&#x27;Destination&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Cabin_deck&#x27;</span>, <span class="string">&#x27;Cabin_side&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">    sns.countplot(x=feature, hue=<span class="string">&#x27;Transported&#x27;</span>, data=<span class="built_in">df</span>)</span><br><span class="line">    plt.title(feature)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/018.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/019.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/020.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/021.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/022.png"
                      alt="photo"
                ></p>
<h3 id="特征编码"><a href="#特征编码" class="headerlink" title="特征编码"></a>特征编码</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import OneHotEncoder</span><br><span class="line"></span><br><span class="line">one_hot_features = [<span class="string">&#x27;HomePlanet&#x27;</span>, <span class="string">&#x27;Destination&#x27;</span>, <span class="string">&#x27;CryoSleep&#x27;</span>, <span class="string">&#x27;VIP&#x27;</span>, <span class="string">&#x27;Cabin_deck&#x27;</span>, <span class="string">&#x27;Cabin_side&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ohe = OneHotEncoder(sparse_output=False, handle_unknown=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">encoded_array = ohe.fit_transform(<span class="built_in">df</span>[one_hot_features])</span><br><span class="line">encoded_cols = ohe.get_feature_names_out(one_hot_features)</span><br><span class="line"></span><br><span class="line">encoded_df = pd.DataFrame(encoded_array, columns=encoded_cols, index=df.index)</span><br><span class="line"></span><br><span class="line">df_cleaned_encoded = pd.concat([df.drop(columns=one_hot_features), encoded_df], axis=1)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df_cleaned_encoded.drop(columns=[<span class="string">&#x27;Cabin_num&#x27;</span>], inplace=True)</span><br></pre></td></tr></table></figure></div>

<h3 id="相关性矩阵"><a href="#相关性矩阵" class="headerlink" title="相关性矩阵"></a>相关性矩阵</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y = df_cleaned_encoded[<span class="string">&#x27;Transported&#x27;</span>]</span><br><span class="line">X = df_cleaned_encoded.drop([<span class="string">&#x27;Transported&#x27;</span>], axis=1)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line">correlation_matrix = pd.concat([X_train, y_train], axis=1).corr()</span><br><span class="line"><span class="comment"># 设置相关性的阈值</span></span><br><span class="line">threshold = 0.2</span><br><span class="line">mask = np.abs(correlation_matrix) &gt; threshold</span><br><span class="line"></span><br><span class="line">sns.heatmap(correlation_matrix, annot=True, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, mask=~mask, center=0)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/024.png"
                      alt="photo"
                ></p>
<h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.feature_selection import SelectKBest, chi2</span><br><span class="line">from sklearn.datasets import load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用卡方检验选择前 2 个最佳特征</span></span><br><span class="line">selector = SelectKBest(chi2, k=9)</span><br><span class="line">X_new = selector.fit_transform(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;选择后的特征形状：&quot;</span>, X_new.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;每个特征的得分：&quot;</span>, selector.scores_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否被选择：&quot;</span>, selector.get_support())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个特征的得分</span></span><br><span class="line">scores = pd.Series(selector.scores_, index=X.columns)</span><br><span class="line">scores = scores.sort_values(ascending=False)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方检验得分最高的特征：\n&quot;</span>, scores.head(29))</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/025.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方检验得分最低的特征：\n&quot;</span>, scores.tail(15))</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/026.png"
                      alt="photo"
                ></p>
<p>我们将特征分数较低的删除</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df_cleaned_encoded.drop(columns=[</span><br><span class="line">    <span class="string">&#x27;Cabin_deck_A&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Destination_PSO J318.5-22&#x27;</span></span><br><span class="line">, <span class="string">&#x27;VIP_False&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_T&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_G&#x27;</span></span><br><span class="line">, <span class="string">&#x27;HomePlanet_Mars&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_D&#x27;</span></span><br><span class="line">, <span class="string">&#x27;VIP_True&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Destination_TRAPPIST-1e&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_side_S&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_side_P&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_F&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_E&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Destination_55 Cancri e&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_C&#x27;</span>], inplace=True)</span><br></pre></td></tr></table></figure></div>

<h3 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y = df_cleaned_encoded[<span class="string">&#x27;Transported&#x27;</span>]</span><br><span class="line">X = df_cleaned_encoded.drop([<span class="string">&#x27;Transported&#x27;</span>], axis=1)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.ensemble import RandomForestClassifier</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">X_test_scaled = scaler.transform(X_test)</span><br><span class="line"></span><br><span class="line">rf = RandomForestClassifier(n_estimators=100, random_state=42)</span><br><span class="line">rf.fit(X_train_scaled, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = rf.predict(X_test_scaled)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred))</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/027.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import lightgbm as lgb</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line"></span><br><span class="line">model = lgb.LGBMClassifier()</span><br><span class="line">model.fit(X_train_scaled, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = model.predict(X_test_scaled)</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征重要性</span></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">lgb.plot_importance(model, max_num_features=20)</span><br><span class="line">plt.title(<span class="string">&quot;Feature Importance&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/028.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/029.png"
                      alt="photo"
                ></p>
<h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay</span><br><span class="line"></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line">disp = ConfusionMatrixDisplay(confusion_matrix=cm)</span><br><span class="line">disp.plot(cmap=<span class="string">&#x27;Blues&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Confusion Matrix&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/18/030.png"
                      alt="photo"
                ></p>
<h2 id="测试集预测"><a href="#测试集预测" class="headerlink" title="测试集预测"></a>测试集预测</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#整理测试集</span></span><br><span class="line">tdf = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">missing_features = [<span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;RoomService&#x27;</span>, <span class="string">&#x27;FoodCourt&#x27;</span>, <span class="string">&#x27;ShoppingMall&#x27;</span>, <span class="string">&#x27;Spa&#x27;</span>, <span class="string">&#x27;VRDeck&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> missing_features:</span><br><span class="line">    tdf[feature].fillna(tdf[feature].mean(), inplace=True)</span><br><span class="line"></span><br><span class="line">categorical_features = [<span class="string">&#x27;HomePlanet&#x27;</span>, <span class="string">&#x27;CryoSleep&#x27;</span>, <span class="string">&#x27;Cabin&#x27;</span>,<span class="string">&#x27;Destination&#x27;</span>, <span class="string">&#x27;VIP&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用众数填充缺失值</span></span><br><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> categorical_features:</span><br><span class="line">    tdf[feature].fillna(tdf[feature].mode()[0], inplace=True)</span><br><span class="line"></span><br><span class="line">tdf.drop(columns=[<span class="string">&#x27;PassengerId&#x27;</span>, <span class="string">&#x27;Name&#x27;</span>], inplace=True)</span><br><span class="line"></span><br><span class="line">tdf[[<span class="string">&#x27;Cabin_deck&#x27;</span>, <span class="string">&#x27;Cabin_num&#x27;</span>, <span class="string">&#x27;Cabin_side&#x27;</span>]] = tdf[<span class="string">&#x27;Cabin&#x27;</span>].str.split(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">expand</span>=True)</span><br><span class="line"></span><br><span class="line">tdf.drop(columns=[<span class="string">&#x27;Cabin&#x27;</span>], inplace=True)</span><br><span class="line"></span><br><span class="line">features = [ <span class="string">&#x27;RoomService&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;FoodCourt&#x27;</span>, <span class="string">&#x27;ShoppingMall&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Spa&#x27;</span>, <span class="string">&#x27;VRDeck&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">    tdf[col] = np.log1p(tdf[col])</span><br><span class="line"></span><br><span class="line">    Q1 = tdf[col].quantile(0.25)</span><br><span class="line">    Q3 = tdf[col].quantile(0.75)</span><br><span class="line">    IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">    lower = Q1 - 1.5 * IQR</span><br><span class="line">    upper = Q3 + 1.5 * IQR</span><br><span class="line"></span><br><span class="line">    tdf[col] = tdf[col].clip(lower=lower, upper=upper)</span><br><span class="line"></span><br><span class="line">Q1 = <span class="built_in">df</span>[<span class="string">&#x27;Age&#x27;</span>].quantile(0.25)</span><br><span class="line">Q3 = <span class="built_in">df</span>[<span class="string">&#x27;Age&#x27;</span>].quantile(0.75)</span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">lower = Q1 - 1.5 * IQR</span><br><span class="line">upper = Q3 + 1.5 * IQR</span><br><span class="line"></span><br><span class="line">tdf[<span class="string">&#x27;Age&#x27;</span>] = tdf[<span class="string">&#x27;Age&#x27;</span>].clip(lower=lower, upper=upper)</span><br><span class="line"></span><br><span class="line">from sklearn.preprocessing import OneHotEncoder</span><br><span class="line"></span><br><span class="line">one_hot_features = [<span class="string">&#x27;HomePlanet&#x27;</span>, <span class="string">&#x27;Destination&#x27;</span>, <span class="string">&#x27;CryoSleep&#x27;</span>, <span class="string">&#x27;VIP&#x27;</span>, <span class="string">&#x27;Cabin_deck&#x27;</span>, <span class="string">&#x27;Cabin_side&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ohe = OneHotEncoder(sparse_output=False, handle_unknown=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">encoded_array = ohe.fit_transform(tdf[one_hot_features])</span><br><span class="line">encoded_cols = ohe.get_feature_names_out(one_hot_features)</span><br><span class="line"></span><br><span class="line">encoded_df = pd.DataFrame(encoded_array, columns=encoded_cols, index=tdf.index)</span><br><span class="line"></span><br><span class="line">tdf_cleaned_encoded = pd.concat([tdf.drop(columns=one_hot_features), encoded_df], axis=1)</span><br><span class="line"></span><br><span class="line">tdf_cleaned_encoded.drop(columns=[<span class="string">&#x27;Cabin_num&#x27;</span>], inplace=True)</span><br><span class="line"></span><br><span class="line">tdf_cleaned_encoded.drop(columns=[</span><br><span class="line">    <span class="string">&#x27;Cabin_deck_A&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Destination_PSO J318.5-22&#x27;</span></span><br><span class="line">, <span class="string">&#x27;VIP_False&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_T&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_G&#x27;</span></span><br><span class="line">, <span class="string">&#x27;HomePlanet_Mars&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_D&#x27;</span></span><br><span class="line">, <span class="string">&#x27;VIP_True&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Destination_TRAPPIST-1e&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_side_S&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_side_P&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_F&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_E&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Destination_55 Cancri e&#x27;</span></span><br><span class="line">, <span class="string">&#x27;Cabin_deck_C&#x27;</span>], inplace=True)</span><br><span class="line"></span><br><span class="line">X_test_scaled = scaler.transform(tdf_cleaned_encoded)</span><br><span class="line"></span><br><span class="line">model = lgb.LGBMClassifier()</span><br><span class="line">model.fit(X_train_scaled, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">y_pred = model.predict(tdf_cleaned_encoded)</span><br><span class="line"></span><br><span class="line">tdf = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line">tdf[<span class="string">&#x27;pred&#x27;</span>] = y_pred</span><br><span class="line"></span><br><span class="line">result = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;iPassengerId&#x27;</span>: tdf[<span class="string">&#x27;PassengerId&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Transported&#x27;</span>: tdf[<span class="string">&#x27;pred&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">result.to_csv(<span class="string">&quot;submission.csv&quot;</span>, index=False)</span><br></pre></td></tr></table></figure></div>

<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p>chatGPT 4o<br>提问的问题：</p>
<ol>
<li>我有一份数据 其中的一个特征内容为：B&#x2F;0&#x2F;P 这种形式 如何将这一组数据以“&#x2F;”拆分成三列特征</li>
<li>bool类型的数据怎么处理</li>
<li>bool类型要转换为数值型吗</li>
<li>我想查看类别型与target之间的关系</li>
<li>在数据分析时 我有一列是类别型 但是这一列的内容是数字 如何将其转换为数值型</li>
<li>如何将object类型添加到相关性矩阵查看其相关性</li>
<li>分类问题选择哪个模型好 GBDT怎么样</li>
<li>如何用这个模型来预测测试集</li>
<li>就是说我要重新把测试集也像训练集一样进行处理吗</li>
<li>假设我有两列叫id和pred 我如何将其保存到一个新的csv文件中</li>
<li>代码问题：</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ValueError: Classification metrics can<span class="string">&#x27;t handle a mix of continuous-multioutput and binary targets</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import lightgbm as lgb</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.metrics import classification_report</span><br><span class="line"></span><br><span class="line">model = lgb.LGBMClassifier()</span><br><span class="line">model.fit(X_train_scaled, y_train)</span><br><span class="line"></span><br><span class="line">y_pred = model.predict(X_test_scaled)</span><br><span class="line"><span class="built_in">print</span>(classification_report(X_test_scaled, y_pred))</span><br><span class="line"></span><br><span class="line">mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">r2 = r2_score(y_test, y_pred)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Mean Squared Error:&quot;</span>, mse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;R^2 Score:&quot;</span>, r2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征重要性</span></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">lgb.plot_importance(model, max_num_features=20)</span><br><span class="line">plt.title(<span class="string">&quot;Feature Importance&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">Cell In[67], line 9</span><br><span class="line">      6 model.fit(X_train_scaled, y_train)</span><br><span class="line">      8 y_pred = model.predict(X_test_scaled)</span><br><span class="line">----&gt; 9 <span class="built_in">print</span>(classification_report(X_test, y_pred))</span><br><span class="line">     11 mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">     12 r2 = r2_score(y_test, y_pred)</span><br><span class="line"></span><br><span class="line">File /opt/anaconda3/lib/python3.12/site-packages/sklearn/utils/_param_validation.py:213, <span class="keyword">in</span> validate_params.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(*args, **kwargs)</span><br><span class="line">    207 try:</span><br><span class="line">    208     with config_context(</span><br><span class="line">    209         skip_parameter_validation=(</span><br><span class="line">    210             prefer_skip_nested_validation or global_skip_validation</span><br><span class="line">    211         )</span><br><span class="line">    212     ):</span><br><span class="line">--&gt; 213         <span class="built_in">return</span> func(*args, **kwargs)</span><br><span class="line">    214 except InvalidParameterError as e:</span><br><span class="line">    215     <span class="comment"># When the function is just a wrapper around an estimator, we allow</span></span><br><span class="line">    216     <span class="comment"># the function to delegate validation to the estimator, but we replace</span></span><br><span class="line">    217     <span class="comment"># the name of the estimator by the name of the function in the error</span></span><br><span class="line">    218     <span class="comment"># message to avoid confusion.</span></span><br><span class="line">    219     msg = re.sub(</span><br><span class="line">    220         r<span class="string">&quot;parameter of \w+ must be&quot;</span>,</span><br><span class="line">    221         f<span class="string">&quot;parameter of &#123;func.__qualname__&#125; must be&quot;</span>,</span><br><span class="line">...</span><br><span class="line">    116     )</span><br><span class="line">    118 <span class="comment"># We can&#x27;t have more than one value on y_type =&gt; The set is no more needed</span></span><br><span class="line">    119 y_type = y_type.pop()</span><br><span class="line"></span><br><span class="line">ValueError: Classification metrics can<span class="string">&#x27;t handle a mix of continuous-multioutput and binary t</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">Cell In[68], line 11</span><br><span class="line">      8 y_pred = model.predict(X_test_scaled)</span><br><span class="line">      9 <span class="built_in">print</span>(classification_report(y_test, y_pred))</span><br><span class="line">---&gt; 11 mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">     12 r2 = r2_score(y_test, y_pred)</span><br><span class="line">     14 <span class="built_in">print</span>(<span class="string">&quot;Mean Squared Error:&quot;</span>, mse)</span><br><span class="line"></span><br><span class="line">File /opt/anaconda3/lib/python3.12/site-packages/sklearn/utils/_param_validation.py:213, <span class="keyword">in</span> validate_params.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(*args, **kwargs)</span><br><span class="line">    207 try:</span><br><span class="line">    208     with config_context(</span><br><span class="line">    209         skip_parameter_validation=(</span><br><span class="line">    210             prefer_skip_nested_validation or global_skip_validation</span><br><span class="line">    211         )</span><br><span class="line">    212     ):</span><br><span class="line">--&gt; 213         <span class="built_in">return</span> func(*args, **kwargs)</span><br><span class="line">    214 except InvalidParameterError as e:</span><br><span class="line">    215     <span class="comment"># When the function is just a wrapper around an estimator, we allow</span></span><br><span class="line">    216     <span class="comment"># the function to delegate validation to the estimator, but we replace</span></span><br><span class="line">    217     <span class="comment"># the name of the estimator by the name of the function in the error</span></span><br><span class="line">    218     <span class="comment"># message to avoid confusion.</span></span><br><span class="line">    219     msg = re.sub(</span><br><span class="line">    220         r<span class="string">&quot;parameter of \w+ must be&quot;</span>,</span><br><span class="line">    221         f<span class="string">&quot;parameter of &#123;func.__qualname__&#125; must be&quot;</span>,</span><br><span class="line">...</span><br><span class="line">--&gt; 510 output_errors = np.average((y_true - y_pred) ** <span class="number">2</span>, axis=<span class="number">0</span>, weights=sample_weight)</span><br><span class="line">    <span class="number">512</span> if isinstance(multioutput, str):</span><br><span class="line">    <span class="number">513</span>     if multioutput == &quot;raw_values&quot;:</span><br><span class="line"></span><br><span class="line">TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">这个是用RandomForestClassifier</span><br><span class="line">precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">       False       0.78      0.75      0.76       861</span><br><span class="line">        True       0.76      0.79      0.77       878</span><br><span class="line"></span><br><span class="line">    accuracy                           0.77      1739</span><br><span class="line">   macro avg       0.77      0.77      0.77      1739</span><br><span class="line">weighted avg       0.77      0.77      0.77      1739</span><br><span class="line"></span><br><span class="line">这个是用GBDT</span><br><span class="line">[LightGBM] [Info] Number of positive: 3500, number of negative: 3454</span><br><span class="line">[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000422 seconds.</span><br><span class="line">You can <span class="built_in">set</span> `force_row_wise=<span class="literal">true</span>` to remove the overhead.</span><br><span class="line">And <span class="keyword">if</span> memory is not enough, you can <span class="built_in">set</span> `force_col_wise=<span class="literal">true</span>`.</span><br><span class="line">[LightGBM] [Info] Total Bins 1356</span><br><span class="line">[LightGBM] [Info] Number of data points <span class="keyword">in</span> the train <span class="built_in">set</span>: 6954, number of used features: 11</span><br><span class="line">[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.503307 -&gt; initscore=0.013230</span><br><span class="line">[LightGBM] [Info] Start training from score 0.013230</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">       False       0.80      0.75      0.77       861</span><br><span class="line">        True       0.77      0.82      0.79       878</span><br><span class="line"></span><br><span class="line">    accuracy                           0.78      1739</span><br><span class="line">   macro avg       0.78      0.78      0.78      1739</span><br><span class="line">weighted avg       0.78      0.78      0.78      1739</span><br><span class="line"></span><br><span class="line">他们的结果还可以吗 哪个好</span><br></pre></td></tr></table></figure></div>

<h2 id="kaggle地址"><a href="#kaggle地址" class="headerlink" title="kaggle地址"></a>kaggle地址</h2><p>我的此项目的kaggle网址：<br><a class="link"   href="https://www.kaggle.com/code/super213/randomforest-gbdt-f1-0-77" >https://www.kaggle.com/code/super213/randomforest-gbdt-f1-0-77<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>环境检测</title>
    <url>/zhihaojiang.github.io/2025/04/21/20250421%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h2><p>Arduino UNO R3</p>
<h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p><strong>BMP180</strong></p>
<blockquote>
<p>VCC → 3.3V 或 5V<br>GND → GND<br>SCL → A5<br>SDA → A4</p>
</blockquote>
<p><strong>OLED (SSD1306 I2C)</strong></p>
<blockquote>
<p>VCC → 3.3V 或 5V<br>GND → GND<br>SCL → A5<br>SDA → A4</p>
</blockquote>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>报错信息</p>

    </div>
    <div class="notel-content">
      <p>这两个的SDA和SCL都接A4和A5 可以共用的</p>

    </div>
  </div>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;Wire.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Adafruit_Sensor.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Adafruit_BMP085_U.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Adafruit_GFX.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Adafruit_SSD1306.h&gt;</span></span><br><span class="line"></span><br><span class="line">// OLED 设置</span><br><span class="line"><span class="comment">#define SCREEN_WIDTH 128</span></span><br><span class="line"><span class="comment">#define SCREEN_HEIGHT 64</span></span><br><span class="line"><span class="comment">#define OLED_RESET    -1</span></span><br><span class="line">Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET);</span><br><span class="line"></span><br><span class="line">// BMP180 传感器对象</span><br><span class="line">Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">setup</span></span>() &#123;</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line"></span><br><span class="line">  // 初始化 OLED</span><br><span class="line">  <span class="keyword">if</span> (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;OLED ERROR&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (1);</span><br><span class="line">  &#125;</span><br><span class="line">  display.clearDisplay();</span><br><span class="line">  display.setTextSize(1);</span><br><span class="line">  display.setTextColor(WHITE);</span><br><span class="line"></span><br><span class="line">  // 初始化 BMP180</span><br><span class="line">  <span class="keyword">if</span> (!bmp.begin()) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;can&#x27;t find BMP180&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">loop</span></span>() &#123;</span><br><span class="line">  sensors_event_t event;</span><br><span class="line">  bmp.getEvent(&amp;event);</span><br><span class="line"></span><br><span class="line">  display.clearDisplay();</span><br><span class="line">  display.setCursor(0, 0);</span><br><span class="line">  display.println(<span class="string">&quot;Environment&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.pressure) &#123;</span><br><span class="line">    display.setCursor(0, 20);</span><br><span class="line">    display.print(<span class="string">&quot;ATM: &quot;</span>);</span><br><span class="line">    display.print(event.pressure);</span><br><span class="line">    display.println(<span class="string">&quot; hPa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> temperature;</span><br><span class="line">    bmp.getTemperature(&amp;temperature);</span><br><span class="line"></span><br><span class="line">    display.setCursor(0, 40);</span><br><span class="line">    display.print(<span class="string">&quot;temperature: &quot;</span>);</span><br><span class="line">    display.print(temperature);</span><br><span class="line">    display.println(<span class="string">&quot; C&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    display.setCursor(0, 20);</span><br><span class="line">    display.println(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display.display();</span><br><span class="line">  delay(1000);  // 每秒刷新一次</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>超声波雷达测距</title>
    <url>/zhihaojiang.github.io/2025/04/21/20250421%E8%B6%85%E5%A3%B0%E6%B3%A2%E9%9B%B7%E8%BE%BE%E6%B5%8B%E8%B7%9D/</url>
    <content><![CDATA[<h2 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h2><p>Arduino UNO R3</p>
<h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p><strong>HC-SR04</strong></p>
<blockquote>
<p>VCC → 3.3V 或 5V<br>GND → GND<br>Trig → Arduino D9<br>Echo → Arduino D10</p>
</blockquote>
<p><strong>OLED (SSD1306 I2C)</strong></p>
<blockquote>
<p>VCC → 3.3V 或 5V<br>GND → GND<br>SCL → A5<br>SDA → A4</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;Adafruit_GFX.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Adafruit_SSD1306.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define TRIG_PIN 9</span></span><br><span class="line"><span class="comment">#define ECHO_PIN 10</span></span><br><span class="line"><span class="comment">#define SCREEN_WIDTH 128</span></span><br><span class="line"><span class="comment">#define SCREEN_HEIGHT 64</span></span><br><span class="line"><span class="comment">#define OLED_RESET     -1</span></span><br><span class="line">Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET);</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">setup</span></span>() &#123;</span><br><span class="line">  pinMode(TRIG_PIN, OUTPUT);</span><br><span class="line">  pinMode(ECHO_PIN, INPUT);</span><br><span class="line"></span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  <span class="keyword">if</span>(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) &#123;</span><br><span class="line">    Serial.println(F(<span class="string">&quot;OLED init failed&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span>(;;);</span><br><span class="line">  &#125;</span><br><span class="line">  display.clearDisplay();</span><br><span class="line">  display.display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span> <span class="function"><span class="title">getDistance</span></span>() &#123;</span><br><span class="line">  digitalWrite(TRIG_PIN, LOW);</span><br><span class="line">  delayMicroseconds(2);</span><br><span class="line">  digitalWrite(TRIG_PIN, HIGH);</span><br><span class="line">  delayMicroseconds(10);</span><br><span class="line">  digitalWrite(TRIG_PIN, LOW);</span><br><span class="line">  long duration = pulseIn(ECHO_PIN, HIGH);</span><br><span class="line">  <span class="built_in">return</span> duration * 0.034 / 2;  // 距离（厘米）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int posX = 0; // 用来在横向慢慢移动</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">loop</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">      // 绘制两边的参考线</span><br><span class="line">  display.drawLine(0, 0, 0, SCREEN_HEIGHT, WHITE);  // 左边的距离线</span><br><span class="line">  display.drawLine(SCREEN_WIDTH - 1, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT, WHITE);  // 右边的距离线</span><br><span class="line">  display.display();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">float</span> distance = getDistance();  // 单位 cm</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;Distance: &quot;</span>);</span><br><span class="line">  Serial.println(distance);</span><br><span class="line"></span><br><span class="line">  // 归一化距离（最多显示到60cm）</span><br><span class="line">  int r = map(min(distance, 60.0), 0, 60, SCREEN_HEIGHT - 1, 0); // 越远越上</span><br><span class="line"></span><br><span class="line">  display.drawPixel(posX, r, WHITE);</span><br><span class="line">  posX++;</span><br><span class="line">  <span class="keyword">if</span> (posX &gt;= SCREEN_WIDTH) &#123;</span><br><span class="line">    posX = 0;</span><br><span class="line">    display.clearDisplay(); // 清除屏幕从头来</span><br><span class="line">  &#125;</span><br><span class="line">  display.display();</span><br><span class="line">  delay(100); // 每秒10个点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习中的优化方法及其python实现</title>
    <url>/zhihaojiang.github.io/2025/04/26/20250426%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6python%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p><a class="link"   href="https://www.kaggle.com/datasets/mirichoi0218/insurance/data" >https://www.kaggle.com/datasets/mirichoi0218/insurance/data<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h2><p>About Dataset<br>Context<br>Machine Learning with R by Brett Lantz is a book that provides an introduction to machine learning using R. As far as I can tell, Packt Publishing does not make its datasets available online unless you buy the book and create a user account which can be a problem if you are checking the book out from the library or borrowing the book from a friend. All of these datasets are in the public domain but simply needed some cleaning up and recoding to match the format in the book.</p>
<p>Content<br>Columns</p>
<p>age: age of primary beneficiary</p>
<p>sex: insurance contractor gender, female, male</p>
<p>bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height,<br>objective index of body weight (kg &#x2F; m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9</p>
<p>children: Number of children covered by health insurance &#x2F; Number of dependents</p>
<p>smoker: Smoking</p>
<p>region: the beneficiary’s residential area in the US, northeast, southeast, southwest, northwest.</p>
<p>charges: Individual medical costs billed by health insurance</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.preprocessing import StandardScaler, OneHotEncoder</span><br><span class="line">from sklearn.compose import ColumnTransformer</span><br><span class="line">from sklearn.pipeline import Pipeline</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.metrics import mean_squared_error, r2_score</span><br></pre></td></tr></table></figure></div>

<h3 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> = pd.read_csv(<span class="string">&#x27;insurance.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/001.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/002.png"
                      alt="photo"
                ></p>
<h3 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">num_cols = df.select_dtypes(include=[np.number]).columns.tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> num_cols:</span><br><span class="line">    sns.boxplot(x=col, data=<span class="built_in">df</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/003.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/004.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/005.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/006.png"
                      alt="photo"
                ></p>
<p>可以看到 bmi有异常值</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from scipy.stats import mstats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 胜率变换：将异常值限制在 5% 和 95% 分位数之间</span></span><br><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;bmi&#x27;</span>] = mstats.winsorize(<span class="built_in">df</span>[<span class="string">&#x27;bmi&#x27;</span>], limits=[0.05, 0.05])</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">object_cols = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns.tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> object_cols:</span><br><span class="line">    sns.countplot(x=col, data=<span class="built_in">df</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/007.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/008.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/009.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此图来源：https://www.kaggle.com/code/analyticaobscura/medical-cost-analysis</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(10, 6))</span><br><span class="line">sns.kdeplot(</span><br><span class="line">    data=<span class="built_in">df</span>, </span><br><span class="line">    x=<span class="string">&quot;age&quot;</span>, </span><br><span class="line">    y=<span class="string">&quot;charges&quot;</span>, </span><br><span class="line">    cmap=<span class="string">&quot;Purples&quot;</span>, </span><br><span class="line">    shade=True,     </span><br><span class="line">    cbar=True       </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Age vs Medical Charges KDE Plot&quot;</span>, fontsize=16, color=<span class="string">&#x27;indigo&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Age&quot;</span>, fontsize=12, color=<span class="string">&#x27;slateblue&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Medical Charges ($)&quot;</span>, fontsize=12, color=<span class="string">&#x27;slateblue&#x27;</span>)</span><br><span class="line">plt.grid(True, color=<span class="string">&#x27;lavender&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/015.png"
                      alt="photo"
                ></p>
<p>可以看到 费用与年龄的关系不大<br>大部份人的费用在 10000 左右 并且费用呈现3个档次：10000以下 20000左右 35000左右</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此图来源：https://www.kaggle.com/code/analyticaobscura/medical-cost-analysis</span></span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(1, 2, figsize=(16, 6))</span><br><span class="line">colors = sns.color_palette(<span class="string">&quot;Purples&quot;</span>, 2)  </span><br><span class="line"></span><br><span class="line">sns.boxplot(</span><br><span class="line">    ax=axes[0], </span><br><span class="line">    data=<span class="built_in">df</span>, </span><br><span class="line">    x=<span class="string">&quot;smoker&quot;</span>, </span><br><span class="line">    y=<span class="string">&quot;charges&quot;</span>, </span><br><span class="line">    palette=<span class="string">&quot;Purples&quot;</span></span><br><span class="line">    )</span><br><span class="line">axes[0].set_title(<span class="string">&quot;Medical Charges by Smoking Status&quot;</span>, fontsize=16, color=<span class="string">&#x27;indigo&#x27;</span>)</span><br><span class="line">axes[0].set_xlabel(<span class="string">&quot;Smoker&quot;</span>, fontsize=12, color=<span class="string">&#x27;slateblue&#x27;</span>)</span><br><span class="line">axes[0].set_ylabel(<span class="string">&quot;Medical Charges ($)&quot;</span>, fontsize=12, color=<span class="string">&#x27;slateblue&#x27;</span>)</span><br><span class="line">axes[0].grid(True, linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;lavender&#x27;</span>)</span><br><span class="line"></span><br><span class="line">smoker_counts = <span class="built_in">df</span>[<span class="string">&#x27;smoker&#x27;</span>].value_counts()</span><br><span class="line">axes[1].pie(</span><br><span class="line">    smoker_counts, </span><br><span class="line">    labels=smoker_counts.index, </span><br><span class="line">    autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>, </span><br><span class="line">    colors=colors, </span><br><span class="line">    startangle=140, </span><br><span class="line">    wedgeprops=&#123;<span class="string">&#x27;edgecolor&#x27;</span>: <span class="string">&#x27;white&#x27;</span>&#125;</span><br><span class="line">)</span><br><span class="line">axes[1].set_title(<span class="string">&quot;Proportion of Smokers vs Non-Smokers&quot;</span>, fontsize=16, color=<span class="string">&#x27;indigo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/016.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">plt.subplots(figsize=(10, 6))</span><br><span class="line">plt.subplot(1, 2, 1)</span><br><span class="line">sns.countplot(x=<span class="string">&#x27;smoker&#x27;</span>, data=<span class="built_in">df</span>,hue=<span class="string">&#x27;sex&#x27;</span>, palette=<span class="string">&#x27;Purples&#x27;</span>)</span><br><span class="line">plt.subplot(1, 2, 2)</span><br><span class="line">sns.barplot(x=<span class="string">&#x27;smoker&#x27;</span>,y = <span class="string">&#x27;charges&#x27;</span>, data=<span class="built_in">df</span>,hue=<span class="string">&#x27;sex&#x27;</span>, palette=<span class="string">&#x27;Purples&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/017.png"
                      alt="photo"
                ></p>
<p>可以看到 调查者中不吸烟的占大多数 吸烟者中 男性较多 并且 不吸烟的人医疗费用远小于吸烟者</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">&#x27;children&#x27;</span>,y = <span class="string">&#x27;charges&#x27;</span>, data=<span class="built_in">df</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/018.png"
                      alt="photo"
                ></p>
<p>可以看到 有3个孩子的人医疗费用最高 不过我认为 孩子越多费用越高 不过那4和5比3要低 可能因为幸存者偏差：负担的费用过高而破产、自杀、没被记录所导致的</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">&#x27;region&#x27;</span>, y=<span class="string">&#x27;charges&#x27;</span>,data=<span class="built_in">df</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/019.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.kdeplot(</span><br><span class="line">    x=<span class="string">&#x27;bmi&#x27;</span>, </span><br><span class="line">    y=<span class="string">&#x27;charges&#x27;</span>, </span><br><span class="line">    shade=True,</span><br><span class="line">    cmap=<span class="string">&#x27;Purples&#x27;</span>,</span><br><span class="line">    data=<span class="built_in">df</span></span><br><span class="line">    )</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/020.png"
                      alt="photo"
                ></p>
<p>可以看到 大部份人的bmi指数在20～40之间 且费用都在10000左右 通过查询得知 bmi指数在18.5～24.9之间为正常范围 由此得知 现在人们的bmi指数普遍偏高</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.barplot(x=<span class="string">&#x27;sex&#x27;</span>,y = <span class="string">&#x27;bmi&#x27;</span>,hue=<span class="string">&#x27;children&#x27;</span> ,data=<span class="built_in">df</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/021.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">&#x27;age&#x27;</span>,y = <span class="string">&#x27;bmi&#x27;</span> ,data=<span class="built_in">df</span>, line_kws=&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;orange&#x27;</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/022.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此图来源：https://www.kaggle.com/code/analyticaobscura/medical-cost-analysis</span></span><br><span class="line"></span><br><span class="line">average_charges_by_region = df.groupby(<span class="string">&#x27;region&#x27;</span>)[<span class="string">&#x27;charges&#x27;</span>].mean().reset_index()</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(1, 2, figsize=(16, 6)) </span><br><span class="line">colors = sns.color_palette(<span class="string">&quot;Purples&quot;</span>, len(average_charges_by_region))  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.barplot(</span><br><span class="line">    ax=axes[0], </span><br><span class="line">    data=average_charges_by_region, </span><br><span class="line">    x=<span class="string">&quot;region&quot;</span>, </span><br><span class="line">    y=<span class="string">&quot;charges&quot;</span>, </span><br><span class="line">    palette=<span class="string">&quot;Purples&quot;</span></span><br><span class="line">    )</span><br><span class="line">axes[0].set_title(<span class="string">&quot;Average Medical Charges by Region&quot;</span>, fontsize=16, color=<span class="string">&#x27;indigo&#x27;</span>)</span><br><span class="line">axes[0].set_xlabel(<span class="string">&quot;Region&quot;</span>, fontsize=12, color=<span class="string">&#x27;slateblue&#x27;</span>)</span><br><span class="line">axes[0].set_ylabel(<span class="string">&quot;Average Medical Charges ($)&quot;</span>, fontsize=12, color=<span class="string">&#x27;slateblue&#x27;</span>)</span><br><span class="line">axes[0].grid(True, linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;lavender&#x27;</span>)</span><br><span class="line"></span><br><span class="line">charges = average_charges_by_region[<span class="string">&#x27;charges&#x27;</span>]</span><br><span class="line">regions = average_charges_by_region[<span class="string">&#x27;region&#x27;</span>]</span><br><span class="line">explode = [0.1 <span class="keyword">if</span> i == charges.idxmax() <span class="keyword">else</span> 0 <span class="keyword">for</span> i <span class="keyword">in</span> range(len(charges))] </span><br><span class="line">axes[1].pie(</span><br><span class="line">    charges, </span><br><span class="line">    labels=regions, </span><br><span class="line">    autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>, </span><br><span class="line">    colors=colors, </span><br><span class="line">    explode=explode, </span><br><span class="line">    shadow=True, </span><br><span class="line">    startangle=140, </span><br><span class="line">    wedgeprops=&#123;<span class="string">&#x27;edgecolor&#x27;</span>: <span class="string">&#x27;white&#x27;</span>&#125;</span><br><span class="line">)</span><br><span class="line">axes[1].set_title(<span class="string">&quot;Proportion of Average Charges by Region&quot;</span>, fontsize=16, color=<span class="string">&#x27;indigo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/023.png"
                      alt="photo"
                ></p>
<h3 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a>数据划分</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">X = df.drop(columns=[<span class="string">&#x27;charges&#x27;</span>])</span><br><span class="line">y = <span class="built_in">df</span>[<span class="string">&#x27;charges&#x27;</span>]</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br></pre></td></tr></table></figure></div>

<h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><p>数值型 归一化<br>类别型 独热编码</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">num_cols = [<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;bmi&#x27;</span>, <span class="string">&#x27;children&#x27;</span>]</span><br><span class="line">obj_cols = [<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;smoker&#x27;</span>, <span class="string">&#x27;region&#x27;</span>]</span><br><span class="line"></span><br><span class="line">preprocessor = ColumnTransformer([</span><br><span class="line">    (<span class="string">&#x27;scale_num&#x27;</span>, StandardScaler(), num_cols),</span><br><span class="line">    (<span class="string">&#x27;encode_obj&#x27;</span>, OneHotEncoder(), obj_cols)</span><br><span class="line">])</span><br></pre></td></tr></table></figure></div>

<h3 id="模型建立（线性回归）"><a href="#模型建立（线性回归）" class="headerlink" title="模型建立（线性回归）"></a>模型建立（线性回归）</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">preprocessor.fit(X_train)</span><br><span class="line"></span><br><span class="line">X_train_processed = preprocessor.transform(X_train)</span><br><span class="line">X_test_processed = preprocessor.transform(X_test)</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train_processed, y_train)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y_pred = model.predict(X_test_processed)</span><br><span class="line"></span><br><span class="line">mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">r2 = r2_score(y_test, y_pred)</span><br><span class="line">score = model.score(X_test_processed, y_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mse =&quot;</span>, mse)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;R2 =&quot;</span>, r2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;score =&quot;</span>, score)</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/010.png"
                      alt="photo"
                ></p>
<h3 id="使用不同的优化算法进行优化"><a href="#使用不同的优化算法进行优化" class="headerlink" title="使用不同的优化算法进行优化"></a>使用不同的优化算法进行优化</h3><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">X_train_array = X_train_processed</span><br><span class="line">X_test_array = X_test_processed</span><br><span class="line"></span><br><span class="line">results = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度下降</span></span><br><span class="line">def gradient_descent(X, y, lr=0.01, n_epochs=1000):</span><br><span class="line">    m, n = X.shape</span><br><span class="line">    w = np.random.randn(n)</span><br><span class="line">    b = 0</span><br><span class="line">    losses = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">        y_pred = X @ w + b</span><br><span class="line">        error = y_pred - y</span><br><span class="line">        grad_w = (1/m) * X.T @ error</span><br><span class="line">        grad_b = (1/m) * np.sum(error)</span><br><span class="line"></span><br><span class="line">        w -= lr * grad_w</span><br><span class="line">        b -= lr * grad_b</span><br><span class="line"></span><br><span class="line">        loss = (1/(2*m)) * np.sum(error**2)</span><br><span class="line">        losses.append(loss)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> w, b, losses</span><br><span class="line"></span><br><span class="line">w_gd, b_gd, losses_gd = gradient_descent(X_train_array, y_train.values, lr=0.002, n_epochs=20000)</span><br><span class="line">y_pred_gd = X_test_array @ w_gd + b_gd</span><br><span class="line">results[<span class="string">&#x27;Gradient Descent&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;MSE&#x27;</span>: mean_squared_error(y_test, y_pred_gd),</span><br><span class="line">    <span class="string">&#x27;R2&#x27;</span>: r2_score(y_test, y_pred_gd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">results_df = pd.DataFrame(results).T</span><br><span class="line"><span class="built_in">print</span>(results_df)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(8, 5))</span><br><span class="line">plt.plot(range(1, len(losses_gd)+1), losses_gd, label=<span class="string">&#x27;Gradient Descent Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss (MSE)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Learning Curve - Gradient Descent&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/012.png"
                      alt="photo"
                ></p>
<h4 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 牛顿法（正规方程）</span></span><br><span class="line">X_train_bias = np.hstack([X_train_array, np.ones((X_train_array.shape[<span class="number">0</span>], <span class="number">1</span>))])</span><br><span class="line">X_test_bias = np.hstack([X_test_array, np.ones((X_test_array.shape[<span class="number">0</span>], <span class="number">1</span>))])</span><br><span class="line"></span><br><span class="line">XTX = X_train_bias.T @ X_train_bias</span><br><span class="line">XTy = X_train_bias.T @ y_train.values</span><br><span class="line">w_newton = np.linalg.pinv(XTX) @ XTy</span><br><span class="line">y_pred_newton = X_test_bias @ w_newton</span><br><span class="line"></span><br><span class="line">results[<span class="string">&quot;Newton&#x27;s Method&quot;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;MSE&#x27;</span>: mean_squared_error(y_test, y_pred_newton),</span><br><span class="line">    <span class="string">&#x27;R2&#x27;</span>: r2_score(y_test, y_pred_newton)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">results_df = pd.DataFrame(results).T</span><br><span class="line"><span class="built_in">print</span>(results_df)</span><br></pre></td></tr></table></figure></div>

<h4 id="SGDRegressor"><a href="#SGDRegressor" class="headerlink" title="SGDRegressor"></a>SGDRegressor</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.linear_model import SGDRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># sklearn SGDRegressor</span></span><br><span class="line">sgd_model = SGDRegressor(penalty=None,max_iter=10000, learning_rate=<span class="string">&#x27;adaptive&#x27;</span>, eta0=0.001, random_state=42)</span><br><span class="line">sgd_model.fit(X_train_array, y_train)</span><br><span class="line">y_pred_sgd = sgd_model.predict(X_test_array)</span><br><span class="line">results[<span class="string">&#x27;SGDRegressor (sklearn)&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;MSE&#x27;</span>: mean_squared_error(y_test, y_pred_sgd),</span><br><span class="line">    <span class="string">&#x27;R2&#x27;</span>: r2_score(y_test, y_pred_sgd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="动量法"><a href="#动量法" class="headerlink" title="动量法"></a>动量法</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动量法</span></span><br><span class="line">def momentum_optimizer(X, y, lr=0.01, n_epochs=1000, beta=0.9):</span><br><span class="line">    m, n = X.shape</span><br><span class="line">    w = np.random.randn(n)  <span class="comment"># 初始化权重</span></span><br><span class="line">    b = 0  <span class="comment"># 初始化偏置</span></span><br><span class="line"></span><br><span class="line">    v_w = np.zeros(n)  <span class="comment"># 初始化动量</span></span><br><span class="line">    v_b = 0  <span class="comment"># 初始化偏置动量</span></span><br><span class="line"></span><br><span class="line">    losses = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">        y_pred = X @ w + b</span><br><span class="line">        error = y_pred - y</span><br><span class="line"></span><br><span class="line">        grad_w = (1/m) * (X.T @ error)</span><br><span class="line">        grad_b = (1/m) * np.sum(error)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新动量</span></span><br><span class="line">        v_w = beta * v_w + (1 - beta) * grad_w</span><br><span class="line">        v_b = beta * v_b + (1 - beta) * grad_b</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        w -= lr * v_w</span><br><span class="line">        b -= lr * v_b</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        loss = (1/(2*m)) * np.sum(error**2)</span><br><span class="line">        losses.append(loss)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> w, b, losses</span><br><span class="line">    </span><br><span class="line">w_momentum, b_momentum, losses_momentum = momentum_optimizer(X_train_array, y_train.values, lr=0.001, n_epochs=10000, beta=0.9)</span><br><span class="line"></span><br><span class="line">y_pred_momentum = X_test_array @ w_momentum + b_momentum</span><br><span class="line"></span><br><span class="line">results[<span class="string">&#x27;momentum_optimizer&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;MSE&#x27;</span>: mean_squared_error(y_test, y_pred_momentum),</span><br><span class="line">    <span class="string">&#x27;R2&#x27;</span>: r2_score(y_test, y_pred_momentum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(8, 5))</span><br><span class="line">plt.plot(range(1, len(losses_momentum)+1), losses_momentum, label=<span class="string">&#x27;momentum_optimizer Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss (MSE)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Learning Curve - momentum_optimizer&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/013.png"
                      alt="photo"
                ></p>
<h4 id="Adam优化器"><a href="#Adam优化器" class="headerlink" title="Adam优化器"></a>Adam优化器</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Adam优化器</span></span><br><span class="line">def adam_optimizer(X, y, lr=0.001, n_epochs=1000, beta1=0.9, beta2=0.999, epsilon=1e-8):</span><br><span class="line">    m, n = X.shape</span><br><span class="line">    w = np.random.randn(n)  <span class="comment"># 初始化权重</span></span><br><span class="line">    b = 0  <span class="comment"># 初始化偏置</span></span><br><span class="line"></span><br><span class="line">    m_w = np.zeros(n)  <span class="comment"># 初始化一阶矩</span></span><br><span class="line">    v_w = np.zeros(n)  <span class="comment"># 初始化二阶矩</span></span><br><span class="line">    m_b = 0  <span class="comment"># 初始化偏置的一阶矩</span></span><br><span class="line">    v_b = 0  <span class="comment"># 初始化偏置的二阶矩</span></span><br><span class="line"></span><br><span class="line">    losses = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">        y_pred = X @ w + b</span><br><span class="line">        error = y_pred - y</span><br><span class="line"></span><br><span class="line">        grad_w = (1/m) * (X.T @ error)</span><br><span class="line">        grad_b = (1/m) * np.sum(error)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新一阶矩和二阶矩</span></span><br><span class="line">        m_w = beta1 * m_w + (1 - beta1) * grad_w</span><br><span class="line">        v_w = beta2 * v_w + (1 - beta2) * (grad_w ** 2)</span><br><span class="line">        m_b = beta1 * m_b + (1 - beta1) * grad_b</span><br><span class="line">        v_b = beta2 * v_b + (1 - beta2) * (grad_b ** 2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算偏差修正</span></span><br><span class="line">        m_w_hat = m_w / (1 - beta1 ** (epoch + 1))</span><br><span class="line">        v_w_hat = v_w / (1 - beta2 ** (epoch + 1))</span><br><span class="line">        m_b_hat = m_b / (1 - beta1 ** (epoch + 1))</span><br><span class="line">        v_b_hat = v_b / (1 - beta2 ** (epoch + 1))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新权重和偏置</span></span><br><span class="line">        w -= lr * m_w_hat / (np.sqrt(v_w_hat) + epsilon)</span><br><span class="line">        b -= lr * m_b_hat / (np.sqrt(v_b_hat) + epsilon)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        loss = (1/(2*m)) * np.sum(error**2)</span><br><span class="line">        losses.append(loss)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> w, b, losses</span><br><span class="line">    </span><br><span class="line">w_adam, b_adam, losses_adam = adam_optimizer(X_train_array, y_train.values, lr=0.0001, n_epochs=50000,beta1=0.85)</span><br><span class="line"></span><br><span class="line">y_pred_adam = X_test_array @ w_adam + b_adam</span><br><span class="line"></span><br><span class="line">results[<span class="string">&#x27;adam_optimizer&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;MSE&#x27;</span>: mean_squared_error(y_test, y_pred_adam),</span><br><span class="line">    <span class="string">&#x27;R2&#x27;</span>: r2_score(y_test, y_pred_adam)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(8, 5))</span><br><span class="line">plt.plot(range(1, len(losses_adam)+1), losses_adam, label=<span class="string">&#x27;adam_optimizer Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss (MSE)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Learning Curve - adam_optimizer&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/014.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">results_df = pd.DataFrame(results).T</span><br><span class="line"><span class="built_in">print</span>(results_df)</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/04/26/011.png"
                      alt="photo"
                ></p>
<h3 id="使用随机森林预测"><a href="#使用随机森林预测" class="headerlink" title="使用随机森林预测"></a>使用随机森林预测</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.ensemble import RandomForestRegressor</span><br><span class="line"></span><br><span class="line">rf_model = RandomForestRegressor(n_estimators=100, random_state=42)</span><br><span class="line">rf_model.fit(X_train_processed, y_train)</span><br><span class="line"></span><br><span class="line">y_pred_rf = rf_model.predict(X_test_array)</span><br><span class="line"></span><br><span class="line">mse_rf = mean_squared_error(y_test, y_pred_rf)</span><br><span class="line">r2_rf = r2_score(y_test, y_pred_rf)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;Random Forest MSE: &#123;mse_rf:.4f&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;Random Forest R2: &#123;r2_rf:.4f&#125;&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>Random Forest MSE: 21083936.2878<br>Random Forest R2: 0.8642</p>
</blockquote>
<h4 id="贝叶斯优化"><a href="#贝叶斯优化" class="headerlink" title="贝叶斯优化"></a>贝叶斯优化</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from hyperopt import fmin, tpe, hp, STATUS_OK, Trials</span><br><span class="line"></span><br><span class="line">def objective(params):</span><br><span class="line">    model = RandomForestRegressor(</span><br><span class="line">        n_estimators=int(params[<span class="string">&#x27;n_estimators&#x27;</span>]),</span><br><span class="line">        max_depth=int(params[<span class="string">&#x27;max_depth&#x27;</span>]),</span><br><span class="line">        min_samples_split=int(params[<span class="string">&#x27;min_samples_split&#x27;</span>]),</span><br><span class="line">        min_samples_leaf=int(params[<span class="string">&#x27;min_samples_leaf&#x27;</span>]),</span><br><span class="line">        random_state=42</span><br><span class="line">    )</span><br><span class="line">    model.fit(X_train_processed, y_train)</span><br><span class="line">    y_pred = model.predict(X_test_processed)</span><br><span class="line">    mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">    rmse = np.sqrt(mse)</span><br><span class="line">    <span class="built_in">return</span> &#123;<span class="string">&#x27;loss&#x27;</span>: rmse,<span class="string">&#x27;status&#x27;</span>: STATUS_OK&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超参数空间</span></span><br><span class="line">space = &#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>: hp.quniform(<span class="string">&#x27;n_estimators&#x27;</span>, 50, 200, 1),</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: hp.quniform(<span class="string">&#x27;max_depth&#x27;</span>, 5, 20, 1),</span><br><span class="line">    <span class="string">&#x27;min_samples_split&#x27;</span>: hp.quniform(<span class="string">&#x27;min_samples_split&#x27;</span>, 2, 10, 1),</span><br><span class="line">    <span class="string">&#x27;min_samples_leaf&#x27;</span>: hp.quniform(<span class="string">&#x27;min_samples_leaf&#x27;</span>, 1, 4, 1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 定义优化算法</span></span><br><span class="line">tpe_algorithm = tpe.suggest</span><br><span class="line"><span class="comment"># 定义优化过程</span></span><br><span class="line">trials = Trials()</span><br><span class="line">best = fmin(fn=objective,</span><br><span class="line">            space=space,</span><br><span class="line">            algo=tpe_algorithm,</span><br><span class="line">            max_evals=20,</span><br><span class="line">            trials=trials)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Best parameters found: &quot;</span>, best)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>100%|██████████| 20&#x2F;20 [00:02&lt;00:00,  6.72trial&#x2F;s, best loss: 4357.951533549515]<br>Best parameters found:  {‘max_depth’: 7.0, ‘min_samples_leaf’: 3.0, ‘min_samples_split’: 7.0, ‘n_estimators’: 81.0}</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">best_model = RandomForestRegressor(</span><br><span class="line">    n_estimators=int(best[<span class="string">&#x27;n_estimators&#x27;</span>]),</span><br><span class="line">    max_depth=int(best[<span class="string">&#x27;max_depth&#x27;</span>]),</span><br><span class="line">    min_samples_split=int(best[<span class="string">&#x27;min_samples_split&#x27;</span>]),</span><br><span class="line">    min_samples_leaf=int(best[<span class="string">&#x27;min_samples_leaf&#x27;</span>]),</span><br><span class="line">    random_state=42</span><br><span class="line">)</span><br><span class="line">best_model.fit(X_train_processed, y_train)</span><br><span class="line">y_pred = best_model.predict(X_test_processed)</span><br><span class="line">mse = mean_squared_error(y_test, y_pred)</span><br><span class="line">rmse = np.sqrt(mse)</span><br><span class="line">R2 = r2_score(y_test, y_pred)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;RMSE: &#123;rmse&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;R2: &#123;R2&#125;&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>RMSE: 4357.951533549515<br>R2: 0.8776689420501131</p>
</blockquote>
<h4 id="网格优化"><a href="#网格优化" class="headerlink" title="网格优化"></a>网格优化</h4><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.model_selection import GridSearchCV</span><br><span class="line"></span><br><span class="line">param_grid = &#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>: [100, 200, 300],</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: [10, 20, None],</span><br><span class="line">    <span class="string">&#x27;min_samples_split&#x27;</span>: [2, 5, 10],</span><br><span class="line">    <span class="string">&#x27;min_samples_leaf&#x27;</span>: [1, 2, 4],</span><br><span class="line">    <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># GridSearchCV</span></span><br><span class="line">grid_search = GridSearchCV(</span><br><span class="line">    estimator=rf_model,</span><br><span class="line">    param_grid=param_grid,</span><br><span class="line">    cv=5,             <span class="comment"># 5折交叉验证</span></span><br><span class="line">    n_jobs=-1,        <span class="comment"># 用所有CPU核加速</span></span><br><span class="line">    verbose=2         <span class="comment"># 输出搜索过程</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">grid_search.fit(X_train_processed, y_train)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最优参数：&quot;</span>, grid_search.best_params_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最优得分：&quot;</span>, grid_search.best_score_)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>最优参数： {‘max_depth’: 10, ‘max_features’: ‘sqrt’, ‘min_samples_leaf’: 2, ‘min_samples_split’: 2, ‘n_estimators’: 300}<br>最优得分： 0.8405858915839397</p>
</blockquote>
<p>综上 无论是线性回归还是随机森林 在进行优化后 他们的分数都至少上升了1% 说明使用优化器进行优化是有效果的</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Predict Calorie Expenditure</title>
    <url>/zhihaojiang.github.io/2025/05/09/20250509Predict%20Calorie%20Expenditure/</url>
    <content><![CDATA[<h1 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h1><p><a class="link"   href="https://www.kaggle.com/competitions/playground-series-s5e5/data" >https://www.kaggle.com/competitions/playground-series-s5e5/data<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h1><p>The dataset for this competition (both train and test) was generated from a deep learning model trained on the Calories Burnt Prediction dataset. Feature distributions are close to, but not exactly the same, as the original. Feel free to use the original dataset as part of this competition, both to explore differences as well as to see whether incorporating the original in training improves model performance.</p>
<p>Files<br>train.csv - the training dataset; Calories is the continuous target<br>test.csv - the test dataset; your objective is to predict the Calories for each row<br>sample_submission.csv - a sample submission file in the correct format.</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>导入库</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br></pre></td></tr></table></figure></div>

<h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/001.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/002.png"
                      alt="photo"
                ></p>
<p>通过翻译得到每个特征的意思：</p>
<ul>
<li>Sex: 性别，1表示男性，0表示女性</li>
<li>Age: 年龄</li>
<li>Height: 身高，单位为厘米</li>
<li>Weight: 体重，单位为千克</li>
<li>Duration: 活动持续时间，单位为分钟</li>
<li>Heart_Rate: 心率，每分钟的心跳次数</li>
<li>Body_Temp: 体温，单位为摄氏度</li>
<li>Calories: 卡路里，这是我们要预测的目标变量</li>
</ul>
<p>我们首先检查数据集中是否存在缺失值</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.drop(columns=[<span class="string">&#x27;id&#x27;</span>], inplace=True)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/003.png"
                      alt="photo"
                ></p>
<p>可以看到 没有缺失值</p>
<p>由于我们要预测卡路里的消耗量 因此我们自然想到BMI这个指标与人体有关 因此添加BMI这个特征</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;BMI&#x27;</span>] = <span class="built_in">df</span>[<span class="string">&#x27;Weight&#x27;</span>] / (<span class="built_in">df</span>[<span class="string">&#x27;Height&#x27;</span>] / 100) ** 2</span><br></pre></td></tr></table></figure></div>
<h2 id="特征编码"><a href="#特征编码" class="headerlink" title="特征编码"></a>特征编码</h2><p>将性别转换为数值型</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span>[<span class="string">&#x27;Sex&#x27;</span>] = <span class="built_in">df</span>[<span class="string">&#x27;Sex&#x27;</span>].replace(&#123;<span class="string">&#x27;male&#x27;</span>: 1, <span class="string">&#x27;female&#x27;</span>: 0&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">    plt.scatter(<span class="built_in">df</span>[col], <span class="built_in">df</span>[<span class="string">&#x27;Calories&#x27;</span>])</span><br><span class="line">    plt.xlabel(col)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Calories&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/004.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/005.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/006.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/007.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/008.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/009.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/010.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/011.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/012.png"
                      alt="photo"
                ></p>
<p>可以看到 duration、Heart_Rate、Body_Temp与Calories呈线性关系<br>接下来我们查看特征与特征之间的相关性。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.countplot(x=pd.cut(<span class="built_in">df</span>[<span class="string">&#x27;Weight&#x27;</span>], bins=20, labels=False), data=<span class="built_in">df</span>,hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/013.png"
                      alt="photo"
                ></p>
<p>可以看到 男性的体重分布是偏右的，而女性的体重分布是偏左的</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.lineplot(x=<span class="string">&#x27;Height&#x27;</span>,y=<span class="string">&#x27;Weight&#x27;</span>,data=<span class="built_in">df</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/014.png"
                      alt="photo"
                ></p>
<p>可以看到 Weight与Height存在正相关</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.lineplot(x=<span class="string">&#x27;Duration&#x27;</span>,y=<span class="string">&#x27;Heart_Rate&#x27;</span>,data=<span class="built_in">df</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/015.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.lineplot(x=<span class="string">&#x27;Duration&#x27;</span>,y=<span class="string">&#x27;Body_Temp&#x27;</span>,data=<span class="built_in">df</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/016.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sns.lineplot(x=<span class="string">&#x27;Heart_Rate&#x27;</span>,y=<span class="string">&#x27;Body_Temp&#x27;</span>,data=<span class="built_in">df</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/017.png"
                      alt="photo"
                ></p>
<h2 id="异常值可视化检测"><a href="#异常值可视化检测" class="headerlink" title="异常值可视化检测"></a>异常值可视化检测</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">    sns.boxplot(x=<span class="built_in">df</span>[col])</span><br><span class="line">    plt.title(col)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/018.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/019.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/020.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/021.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/022.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/023.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/024.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/025.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/026.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from scipy.stats import mstats</span><br><span class="line"></span><br><span class="line">features = [<span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">    <span class="built_in">df</span>[col] = mstats.winsorize(<span class="built_in">df</span>[col], limits=[0.05, 0.05])</span><br></pre></td></tr></table></figure></div>

<h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.corr()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/09/027.png"
                      alt="photo"
                ></p>
<p>可以看到在相关性分析中</p>
<p><code>Calories</code>与<code>Duration</code>、<code>Heart_Rate</code>、<code>Body_Temp</code>的相关性最高<br>为0.959908、0.908748、0.828671，因此选择这三个特征作为模型的输入特征<br>接下来 我们通过卡方检验来选择特征</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y = <span class="built_in">df</span>[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">X = df.drop([<span class="string">&#x27;Calories&#x27;</span>], axis=1)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.feature_selection import SelectKBest, chi2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用卡方检验选择前 2 个最佳特征</span></span><br><span class="line">selector = SelectKBest(chi2, k=3)</span><br><span class="line">X_new = selector.fit_transform(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;选择后的特征形状：&quot;</span>, X_new.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;每个特征的得分：&quot;</span>, selector.scores_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;是否被选择：&quot;</span>, selector.get_support())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个特征的得分</span></span><br><span class="line">scores = pd.Series(selector.scores_, index=X.columns)</span><br><span class="line">scores = scores.sort_values(ascending=False)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;卡方检验得分最高的特征：\n&quot;</span>, scores.head(10))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>选择后的特征形状： (600000, 3)<br>每个特征的得分： [8.72102007e+03 2.13858892e+05 1.32375353e+04 4.71694088e+04<br> 2.61568982e+06 4.35154289e+05 6.94410801e+03 1.65968833e+03]<br>是否被选择： [False  True False False  True  True False False]<br>卡方检验得分最高的特征：<br> Duration      2.615690e+06<br>Heart_Rate    4.351543e+05<br>Age           2.138589e+05<br>Weight        4.716941e+04<br>Height        1.323754e+04<br>Sex           8.721020e+03<br>Body_Temp     6.944108e+03<br>BMI           1.659688e+03<br>dtype: float64</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.drop(columns=[<span class="string">&#x27;BMI&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>], inplace=True)</span><br></pre></td></tr></table></figure></div>

<h2 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a>数据划分</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">y = <span class="built_in">df</span>[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">X = df.drop([<span class="string">&#x27;Calories&#x27;</span>], axis=1)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">X_test_scaled = scaler.transform(X_test)</span><br></pre></td></tr></table></figure></div>

<h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.ensemble import RandomForestRegressor</span><br><span class="line">import xgboost as xgb</span><br><span class="line">from sklearn.ensemble import GradientBoostingRegressor</span><br><span class="line">from sklearn.metrics import root_mean_squared_error, root_mean_squared_log_error, r2_score</span><br><span class="line"></span><br><span class="line">models = &#123;</span><br><span class="line">    <span class="string">&#x27;Linear Regression&#x27;</span>: LinearRegression(),</span><br><span class="line">    <span class="string">&#x27;Random Forest&#x27;</span>: RandomForestRegressor(),</span><br><span class="line">    <span class="string">&#x27;XGBoost&#x27;</span>: xgb.XGBRegressor(),</span><br><span class="line">    <span class="string">&#x27;Gradient Boosting&#x27;</span>: GradientBoostingRegressor()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, model <span class="keyword">in</span> models.items():</span><br><span class="line">    y_train_log = np.log1p(y_train)</span><br><span class="line">    model.fit(X_train_scaled, y_train_log)</span><br><span class="line">    y_pred_log = model.predict(X_test_scaled)</span><br><span class="line">    y_pred = np.expm1(y_pred_log)</span><br><span class="line"></span><br><span class="line">    rmse = root_mean_squared_error(y_test, y_pred)</span><br><span class="line">    rmsle = root_mean_squared_log_error(y_test, y_pred)</span><br><span class="line">    r2 = r2_score(y_test, y_pred)</span><br><span class="line">    </span><br><span class="line">    results.append(&#123;</span><br><span class="line">        <span class="string">&#x27;Model&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;RMSE&#x27;</span>: rmse,</span><br><span class="line">        <span class="string">&#x27;RMSLE&#x27;</span>: rmsle,</span><br><span class="line">        <span class="string">&#x27;R²&#x27;</span>: r2</span><br><span class="line">    &#125;)</span><br><span class="line">results_df = pd.DataFrame(results)</span><br><span class="line"><span class="built_in">print</span>(results_df)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<pre><code>           Model       RMSE     RMSLE        R²
</code></pre>
<p>0  Linear Regression  16.044743  0.212877  0.933576<br>1      Random Forest   7.287551  0.102109  0.986297<br>2            XGBoost   6.839083  0.096267  0.987931<br>3  Gradient Boosting   7.001537  0.097709  0.987351</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>糖尿病预测分析</title>
    <url>/zhihaojiang.github.io/2025/05/18/20250518%E7%B3%96%E5%B0%BF%E7%97%85%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h1><p>心血管病、糖尿病等慢性疾病，每年导致的死亡人数占总死亡人数的80%，每年用于慢病医疗费用占中国公共医疗卫生支出的比例超过13%。作为一种常见慢性疾病，糖尿病目前无法根治，但通过科学有效的干预、预防和治疗，能降低发病率和提高患者的生活质量。本课题拟对UCI的糖尿病诊断数据集进行机器学习建模分析，在此基础上探讨诱发糖尿病的重要病因</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>导入库</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">from scipy.stats import mstats</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line"></span><br><span class="line">from sklearn.ensemble import RandomForestClassifier</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">from sklearn.svm import SVC</span><br><span class="line">from sklearn.neighbors import KNeighborsClassifier</span><br><span class="line">from xgboost import XGBClassifier</span><br><span class="line"></span><br><span class="line">from skopt import BayesSearchCV</span><br><span class="line">from skopt.space import Integer, Real</span><br><span class="line">from sklearn.model_selection import StratifiedKFold</span><br><span class="line">from sklearn.metrics import recall_score</span><br><span class="line">from skopt.space import Real, Categorical</span><br><span class="line">from sklearn.metrics import classification_report, confusion_matrix, accuracy_score</span><br></pre></td></tr></table></figure></div>

<h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span>=pd.read_csv(<span class="string">&#x27;pima-indians-diabetes.data.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/001.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.tail()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/002.png"
                      alt="photo"
                ></p>
<p>通过上述查看，我们得知此数据集的特征描述在文件的右下角，我们将字段名称补充进去</p>
<p>我们首先得到列名</p>
<p>df.columns.tolist()</p>
<blockquote>
<p>[‘6’,<br> ‘148’,<br> ‘72’,<br> ‘35’,<br> ‘0’,<br> ‘33.6’,<br> ‘0.627’,<br> ‘50’,<br> ‘1’,<br> ‘Unnamed: 9’,<br> ‘Unnamed: 10’,<br> ‘Unnamed: 11’,<br> ‘Unnamed: 12’]</p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.drop([ <span class="string">&#x27;Unnamed: 9&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Unnamed: 10&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Unnamed: 11&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Unnamed: 12&#x27;</span>], axis=1, inplace=True)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/003.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/004.png"
                      alt="photo"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">columns = [</span><br><span class="line">    <span class="string">&quot;Number of times pregnant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Plasma glucose concentration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Diastolic blood pressure (mm Hg)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Triceps skin fold thickness (mm)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2-Hour serum insulin (mu U/ml)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Body mass index (kg/m^2)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Diabetes pedigree function&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Age (years)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Class variable&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字段名称</span></span><br><span class="line">df.columns = columns</span><br><span class="line"></span><br><span class="line">new_row = pd.Series([6, 148, 72, 35, 0, 33.6, 0.627, 50, 1], index=df.columns)</span><br><span class="line"><span class="built_in">df</span> =pd.concat([<span class="built_in">df</span>, new_row.to_frame().T], ignore_index=True)</span><br><span class="line"></span><br><span class="line">df.tail()</span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&#x27;new_pima-indians-diabetes.data.csv&#x27;</span>, index=False)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span>=pd.read_csv(<span class="string">&#x27;new_pima-indians-diabetes.data.csv&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>从之前的输出中我们可以看到有空白行 将其删除</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> = df.dropna(how=<span class="string">&#x27;all&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>Number of times pregnant            0<br>Plasma glucose concentration        0<br>Diastolic blood pressure (mm Hg)    0<br>Triceps skin fold thickness (mm)    0<br>2-Hour serum insulin (mu U&#x2F;ml)      0<br>Body mass index (kg&#x2F;m^2)            0<br>Diabetes pedigree function          0<br>Age (years)                         0<br>Class variable                      0<br>dtype: int64</p>
</blockquote>
<ul>
<li>Number of times pregnant</li>
<li>怀孕次数</li>
<li>Plasma glucose concentration a 2 hours in an oral glucose tolerance test</li>
<li>口服葡萄糖耐量试验中 2 小时的血浆葡萄糖浓度</li>
<li>Diastolic blood pressure (mm Hg)</li>
<li>舒张压（毫米汞柱）</li>
<li>Triceps skin fold thickness (mm)</li>
<li>三头肌皮褶厚度（毫米）</li>
<li>2-Hour serum insulin (mu U&#x2F;ml)</li>
<li>2 小时血清胰岛素（微单位&#x2F;毫升）</li>
<li>Body mass index (weight in kg&#x2F;(height in m)^2)</li>
<li>体重指数（体重以千克除以身高以米的平方）</li>
<li>Diabetes pedigree function</li>
<li>糖尿病家族史功能</li>
<li>Age (years)</li>
<li>年龄（年）</li>
<li>Class variable (0 or 1)</li>
<li>类别变量（0 或 1）</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/005.png"
                      alt="photo"
                ></p>
<p>从min中看到，有0元素，像是Diastolic blood pressure (mm Hg)之类的特征不应该存在0</p>
<p>说明这是缺失值，用均值填充</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">columns = [<span class="string">&#x27;Plasma glucose concentration&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Diastolic blood pressure (mm Hg)&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Triceps skin fold thickness (mm)&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2-Hour serum insulin (mu U/ml)&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Body mass index (kg/m^2)&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Diabetes pedigree function&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Age (years)&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> columns:</span><br><span class="line">    mean_value = df.loc[<span class="built_in">df</span>[col] != 0, col].mean()</span><br><span class="line">    <span class="built_in">df</span>[col] = <span class="built_in">df</span>[col].replace(0, mean_value)</span><br></pre></td></tr></table></figure></div>

<p>接下来我们查看是否存在异常值 通过查询相关信息，得到了以下结果</p>
<ol>
<li>Number of times pregnant (怀孕次数)<br>正常范围 ：0 到任意正整数。<br>解释 ：这是一个计数字段，表示一个人怀孕的次数。通常没有上限，但常见的范围是 0 到 15 次（极少数情况下可能更高）。</li>
<li>Plasma glucose concentration a 2 hours in an oral glucose tolerance test (口服葡萄糖耐量试验中 2 小时的血浆葡萄糖浓度)<br>单位 ：mg&#x2F;dL 或 mmol&#x2F;L<br>正常范围 ：<br>正常：小于 140 mg&#x2F;dL（7.8 mmol&#x2F;L）<br>空腹血糖受损（IFG）或糖耐量受损（IGT）：140-199 mg&#x2F;dL（7.8-11.1 mmol&#x2F;L）<br>糖尿病：大于等于 200 mg&#x2F;dL（11.1 mmol&#x2F;L）<br>解释 ：这是诊断糖尿病的重要指标之一。通过口服葡萄糖耐量试验（OGTT），可以评估身体对葡萄糖的代谢能力。</li>
<li>Diastolic blood pressure (mm Hg) (舒张压，毫米汞柱)<br>正常范围 ：60-80 mm Hg<br>异常范围 ：<br>高血压前期：80-89 mm Hg<br>高血压：大于等于 90 mm Hg<br>低血压：小于 60 mm Hg<br>解释 ：舒张压是指心脏放松时血管内的压力。长期高血压可能导致心血管疾病。</li>
<li>Triceps skin fold thickness (mm) (三头肌皮褶厚度，毫米)<br>正常范围 （因性别和年龄而异）：<br>男性：约 10-15 mm<br>女性：约 15-25 mm<br>解释 ：三头肌皮褶厚度用于估算体脂百分比。较高的值可能表明较高的体脂水平。</li>
<li>2-Hour serum insulin (mu U&#x2F;ml) (2 小时血清胰岛素，微单位&#x2F;毫升)<br>正常范围 ：小于 30 mu U&#x2F;ml<br>解释 ：胰岛素是调节血糖的关键激素。高胰岛素水平可能表明胰岛素抵抗或糖尿病前期。</li>
<li>Body mass index (BMI) (体重指数，kg&#x2F;m²)<br>正常范围 ：18.5-24.9<br>分类 ：<br>低于 18.5：体重过轻<br>18.5-24.9：正常体重<br>25-29.9：超重<br>大于等于 30：肥胖<br>解释 ：BMI 是衡量体重是否健康的常用指标，但它不考虑肌肉质量等因素。</li>
<li>Diabetes pedigree function (糖尿病家族史功能)<br>单位 ：无单位（通常是概率值）<br>正常范围 ：0 到 1<br>解释 ：这是一个计算值，表示患糖尿病的概率。值越高，患糖尿病的风险越大。具体范围因模型而异，但通常在 0 到 1 之间。</li>
</ol>
<p>通过查看 没有存在那种明显超过人类水平的异常值</p>
<h2 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">columns = df.columns.tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> columns:</span><br><span class="line">    plt.figure(figsize=(10, 6))</span><br><span class="line">    sns.barplot(y=col, data=<span class="built_in">df</span>,hue=<span class="string">&#x27;Class variable&#x27;</span>)</span><br><span class="line">    plt.title(col)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/006.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/007.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/008.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/009.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/010.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/011.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/012.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/013.png"
                      alt="photo"
                ></p>
<p>可以看到 有糖尿病的患者各项指标均比非糖尿病的患者高</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">df.corr()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/014.png"
                      alt="photo"
                ></p>
<p>我们重点关系class variable行 可以看到 Plasma glucose concentration的相关性最高，为0.492928 但仍然不能算作强相关<br>尽管数据中的值在真实世界中都是合理的 但一些特别大的值在进行机器学习时会影响模型的泛化能力，使用IQR方法将异常值替换成边界值</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> columns:</span><br><span class="line">    plt.figure(figsize=(10, 6))</span><br><span class="line">    sns.boxplot(x=col, data=<span class="built_in">df</span>)</span><br><span class="line">    plt.title(f<span class="string">&#x27;Boxplot of &#123;col&#125;&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> columns:</span><br><span class="line">    <span class="comment"># 计算 IQR</span></span><br><span class="line">    Q1 = <span class="built_in">df</span>[col].quantile(0.25)</span><br><span class="line">    Q3 = <span class="built_in">df</span>[col].quantile(0.75)</span><br><span class="line">    IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义上下界</span></span><br><span class="line">    lower_bound = Q1 - 1.5 * IQR</span><br><span class="line">    upper_bound = Q3 + 1.5 * IQR</span><br><span class="line"></span><br><span class="line">    <span class="built_in">df</span>[col] = np.where(</span><br><span class="line">    <span class="built_in">df</span>[col] &lt; lower_bound,  <span class="comment"># 条件：小于下界</span></span><br><span class="line">    lower_bound,            <span class="comment"># 替换为下界</span></span><br><span class="line">    np.where(</span><br><span class="line">        <span class="built_in">df</span>[col] &gt; upper_bound,  <span class="comment"># 条件：大于上界</span></span><br><span class="line">        upper_bound,           <span class="comment"># 替换为上界</span></span><br><span class="line">        <span class="built_in">df</span>[col]                <span class="comment"># 否则保持原值</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> columns:</span><br><span class="line">    plt.figure(figsize=(10, 6))</span><br><span class="line">    sns.boxplot(x=col, data=<span class="built_in">df</span>)</span><br><span class="line">    plt.title(f<span class="string">&#x27;Boxplot of &#123;col&#125;&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/015.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/016.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/017.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/018.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/019.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/020.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/021.png"
                      alt="photo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/super-213/hexo-images/main/articles/2025/05/18/022.png"
                      alt="photo"
                ></p>
<h2 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">X = df.drop(<span class="string">&#x27;Class variable&#x27;</span>, axis=1)</span><br><span class="line">y = <span class="built_in">df</span>[<span class="string">&#x27;Class variable&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_scaled = scaler.fit_transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换回 DataFrames</span></span><br><span class="line">X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)</span><br></pre></td></tr></table></figure></div>

<h2 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a>数据划分</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">X = df.drop(columns=[<span class="string">&#x27;Class variable&#x27;</span>])</span><br><span class="line">y = <span class="built_in">df</span>[<span class="string">&#x27;Class variable&#x27;</span>]  <span class="comment"># 目标变量</span></span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X_scaled_df, y, test_size=0.2, random_state=42)</span><br></pre></td></tr></table></figure></div>

<h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">models = &#123;</span><br><span class="line">    <span class="string">&quot;RandomForestClassifier&quot;</span>: RandomForestClassifier(n_estimators=100, random_state=42,class_weight=<span class="string">&#x27;balanced&#x27;</span>),</span><br><span class="line">    <span class="string">&quot;LogisticRegression&quot;</span>: LogisticRegression(max_iter=1000, random_state=42,class_weight=<span class="string">&#x27;balanced&#x27;</span>),</span><br><span class="line">    <span class="string">&quot;SVM&quot;</span>: SVC(probability=True, random_state=42,class_weight=<span class="string">&#x27;balanced&#x27;</span>),</span><br><span class="line">    <span class="string">&quot;KNN&quot;</span>: KNeighborsClassifier(),</span><br><span class="line">    <span class="string">&quot;XGBoost&quot;</span>: XGBClassifier(eval_metric=<span class="string">&#x27;logloss&#x27;</span>, random_state=42)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化结果字典</span></span><br><span class="line">results = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个模型</span></span><br><span class="line"><span class="keyword">for</span> name, model <span class="keyword">in</span> models.items():  <span class="comment"># 假设 models 是一个字典，键为模型名称，值为模型对象</span></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    model.fit(X_train, y_train)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测测试集</span></span><br><span class="line">    y_pred = model.predict(X_test)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算准确率</span></span><br><span class="line">    accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取分类报告</span></span><br><span class="line">    report = classification_report(y_test, y_pred, output_dict=True)  <span class="comment"># 返回字典格式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 存储结果</span></span><br><span class="line">    results[name] = &#123;</span><br><span class="line">        <span class="string">&#x27;accuracy&#x27;</span>: accuracy,</span><br><span class="line">        <span class="string">&#x27;report&#x27;</span>: report</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个模型的结果</span></span><br><span class="line"><span class="keyword">for</span> name, result <span class="keyword">in</span> results.items():</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;模型: &#123;name&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;准确率: &#123;result[&#x27;accuracy&#x27;]:.4f&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;分类报告:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(classification_report(y_test, models[name].predict(X_test)))  <span class="comment"># 打印格式化的分类报告</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 50)</span><br></pre></td></tr></table></figure></div>

<p>模型: RandomForestClassifier<br>准确率: 0.7727<br>分类报告:<br>              precision    recall  f1-score   support</p>
<pre><code>     0.0       0.81      0.84      0.82        97
     1.0       0.70      0.67      0.68        57

accuracy                           0.77       154
</code></pre>
<p>   macro avg       0.76      0.75      0.75       154<br>weighted avg       0.77      0.77      0.77       154</p>
<hr>
<p>模型: LogisticRegression<br>准确率: 0.7338<br>分类报告:<br>              precision    recall  f1-score   support</p>
<pre><code>     0.0       0.81      0.75      0.78        97
     1.0       0.62      0.70      0.66        57

accuracy                           0.73       154
</code></pre>
<p>   macro avg       0.72      0.73      0.72       154<br>weighted avg       0.74      0.73      0.74       154</p>
<hr>
<p>模型: SVM<br>准确率: 0.7792<br>分类报告:<br>              precision    recall  f1-score   support</p>
<pre><code>     0.0       0.89      0.74      0.81        97
     1.0       0.66      0.84      0.74        57

accuracy                           0.78       154
</code></pre>
<p>   macro avg       0.77      0.79      0.77       154<br>weighted avg       0.80      0.78      0.78       154</p>
<hr>
<p>模型: KNN<br>准确率: 0.7727<br>分类报告:<br>              precision    recall  f1-score   support</p>
<pre><code>     0.0       0.80      0.85      0.82        97
     1.0       0.71      0.65      0.68        57

accuracy                           0.77       154
</code></pre>
<p>   macro avg       0.76      0.75      0.75       154<br>weighted avg       0.77      0.77      0.77       154</p>
<hr>
<p>模型: XGBoost<br>准确率: 0.7727<br>分类报告:<br>              precision    recall  f1-score   support</p>
<pre><code>     0.0       0.82      0.81      0.82        97
     1.0       0.69      0.70      0.70        57

accuracy                           0.77       154
</code></pre>
<p>   macro avg       0.76      0.76      0.76       154<br>weighted avg       0.77      0.77      0.77       154</p>
<hr>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>由于我们是要预测糖尿病，要做到减少漏诊，因此我们更关心召回率，提高召回率，精确率不必在意</p>
<p><strong>随机森林的优化</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义参数搜索空间</span></span><br><span class="line">param_space = &#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>: Integer(50, 300),</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: Integer(3, 30),</span><br><span class="line">    <span class="string">&#x27;min_samples_split&#x27;</span>: Integer(2, 20),</span><br><span class="line">    <span class="string">&#x27;min_samples_leaf&#x27;</span>: Integer(1, 10),</span><br><span class="line">    <span class="string">&#x27;max_features&#x27;</span>: Real(0.1, 1.0, prior=<span class="string">&#x27;uniform&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line">rf = RandomForestClassifier(random_state=42, class_weight=<span class="string">&#x27;balanced&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 贝叶斯优化搜索</span></span><br><span class="line">opt = BayesSearchCV(</span><br><span class="line">    rf,</span><br><span class="line">    search_spaces=param_space,</span><br><span class="line">    scoring=<span class="string">&#x27;recall&#x27;</span>,</span><br><span class="line">    n_iter=30,  <span class="comment"># 搜索的步数（越大越好）</span></span><br><span class="line">    cv=StratifiedKFold(n_splits=5),</span><br><span class="line">    random_state=42,</span><br><span class="line">    n_jobs=-1,</span><br><span class="line">    verbose=2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合模型</span></span><br><span class="line">opt.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Best Recall Score:&quot;</span>, opt.best_score_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Best Parameters:&quot;</span>, opt.best_params_)</span><br></pre></td></tr></table></figure></div>

<p><strong>XGBoost的优化</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算类别不平衡比例，用于 scale_pos_weight</span></span><br><span class="line">neg, pos = (y_train == 0).<span class="built_in">sum</span>(), (y_train == 1).<span class="built_in">sum</span>()</span><br><span class="line">scale_pos_weight = neg / pos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索空间</span></span><br><span class="line">param_space = &#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>: Integer(50, 300),</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: Integer(3, 15),</span><br><span class="line">    <span class="string">&#x27;learning_rate&#x27;</span>: Real(0.01, 0.3, prior=<span class="string">&#x27;log-uniform&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;subsample&#x27;</span>: Real(0.5, 1.0),</span><br><span class="line">    <span class="string">&#x27;colsample_bytree&#x27;</span>: Real(0.5, 1.0),</span><br><span class="line">    <span class="string">&#x27;gamma&#x27;</span>: Real(0, 5),</span><br><span class="line">    <span class="string">&#x27;min_child_weight&#x27;</span>: Integer(1, 10)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">xgb = XGBClassifier(</span><br><span class="line">    objective=<span class="string">&#x27;binary:logistic&#x27;</span>,</span><br><span class="line">    eval_metric=<span class="string">&#x27;logloss&#x27;</span>,</span><br><span class="line">    use_label_encoder=False,</span><br><span class="line">    random_state=42,</span><br><span class="line">    scale_pos_weight=scale_pos_weight  <span class="comment"># 处理类别不平衡</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 贝叶斯优化器</span></span><br><span class="line">opt = BayesSearchCV(</span><br><span class="line">    xgb,</span><br><span class="line">    search_spaces=param_space,</span><br><span class="line">    scoring=<span class="string">&#x27;recall&#x27;</span>,  <span class="comment"># 重点优化召回率</span></span><br><span class="line">    cv=StratifiedKFold(n_splits=5),</span><br><span class="line">    n_iter=30,  <span class="comment"># 迭代次数（越大越好）</span></span><br><span class="line">    n_jobs=-1,</span><br><span class="line">    verbose=2,</span><br><span class="line">    random_state=42</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行搜索</span></span><br><span class="line">opt.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Best Recall Score:&quot;</span>, opt.best_score_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Best Parameters:&quot;</span>, opt.best_params_)</span><br></pre></td></tr></table></figure></div>

<p><strong>SVM的优化</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">base_svm = SVC(probability=True,  <span class="comment"># 便于后续阈值调节</span></span><br><span class="line">               class_weight=<span class="string">&#x27;balanced&#x27;</span>,</span><br><span class="line">               random_state=42)</span><br><span class="line">               </span><br><span class="line">param_space = &#123;</span><br><span class="line">    <span class="string">&#x27;kernel&#x27;</span>: Categorical([<span class="string">&#x27;rbf&#x27;</span>, <span class="string">&#x27;linear&#x27;</span>]),</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: Real(1e-3, 1e3, prior=<span class="string">&#x27;log-uniform&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;gamma&#x27;</span>: Real(1e-4, 1e1, prior=<span class="string">&#x27;log-uniform&#x27;</span>)  <span class="comment"># 仅在 RBF 时生效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt = BayesSearchCV(</span><br><span class="line">    estimator=base_svm,</span><br><span class="line">    search_spaces=param_space,</span><br><span class="line">    scoring=<span class="string">&#x27;recall&#x27;</span>,                 <span class="comment"># 重点关注召回率</span></span><br><span class="line">    cv=StratifiedKFold(n_splits=5),   <span class="comment"># 分层交叉验证</span></span><br><span class="line">    n_iter=30,                        <span class="comment"># 迭代次数，可增加</span></span><br><span class="line">    n_jobs=-1,</span><br><span class="line">    verbose=2,</span><br><span class="line">    random_state=42</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">opt.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Best CV recall:&quot;</span>, opt.best_score_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Best params:&quot;</span>, opt.best_params_)</span><br></pre></td></tr></table></figure></div>

<h2 id="打印最佳召回率"><a href="#打印最佳召回率" class="headerlink" title="打印最佳召回率"></a>打印最佳召回率</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">best_rf = opt.best_estimator_</span><br><span class="line">y_pred = best_rf.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recall:&quot;</span>, recall_score(y_test, y_pred))</span><br><span class="line"></span><br><span class="line">best_xgb = opt.best_estimator_</span><br><span class="line">y_pred = best_xgb.predict(X_test)</span><br><span class="line">recall = recall_score(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test Recall:&quot;</span>, recall)</span><br><span class="line"></span><br><span class="line">best_svm = opt.best_estimator_</span><br><span class="line"></span><br><span class="line">y_proba = best_svm.predict_proba(X_test)[:, 1]   <span class="comment"># 用 X_test</span></span><br><span class="line">thresh   = 0.35</span><br><span class="line">y_pred_thresh = (y_proba &gt;= thresh).astype(int)</span><br><span class="line"></span><br><span class="line">from sklearn.metrics import recall_score</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recall (threshold 0.35):&quot;</span>, recall_score(y_test, y_pred_thresh))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>Recall: 0.7894736842105263<br>Test Recall: 0.7894736842105263<br>Recall (threshold 0.35): 0.7894736842105263</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机科学</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>MathJax Test</title>
    <url>/zhihaojiang.github.io/2025/05/19/0/</url>
    <content><![CDATA[<p>$$<br>i\hbar\frac{\partial}{\partial t}\psi&#x3D;-\frac{\hbar^2}{2m}\nabla^2\psi+V\psi<br>$$</p>
]]></content>
      <categories>
        <category>MathJax</category>
      </categories>
      <tags>
        <tag>MathJax</tag>
      </tags>
  </entry>
</search>
